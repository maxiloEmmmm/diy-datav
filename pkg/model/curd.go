// Code generated by entc, DO NOT EDIT.

package model

import (
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/dataset"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/schema"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/typeconfig"
	go_tool "github.com/maxiloEmmmm/go-tool"
	contact "github.com/maxiloEmmmm/go-web/contact"
)

func uuidId(id string) uuid.UUID {
	u, _ := uuid.Parse(id)
	return u
}

func newApi(client *Client, opt *ApiOption) *Api {
	obj := &Api{Client: client}

	if opt != nil {
		if len(opt.Fields) > 0 {
			af := ActionFields{}
			af.SetFields(opt.Fields["Create"])
			obj.Fields.Create = af

			af = ActionFields{}
			af.SetFields(opt.Fields["Update"])
			obj.Fields.Update = af
		}
	}
	return obj
}

type ApiOption struct {
	Fields map[string][]string
}

type Api struct {
	Fields struct {
		Create ActionFields
		Update ActionFields
	}
	Client *Client
}

type ActionFields struct {
	Has    bool
	Fields map[string]bool
}

func (af *ActionFields) SetFields(fields []string) {
	af.Has = true
	af.Fields = make(map[string]bool, len(fields))
	for _, field := range fields {
		af.Fields[field] = true
	}
}

type Endpoint interface {
	List(*contact.GinHelp)
	Update(*contact.GinHelp)
	Create(*contact.GinHelp)
	Get(*contact.GinHelp)
	Delete(*contact.GinHelp)
}

type CurdBuilder struct {
	Apis struct {
		DataSet    *DataSetApi
		TypeConfig *TypeConfigApi
	}
}

func NewCurdBuilder(client *Client) *CurdBuilder {
	cb := &CurdBuilder{}
	cb.Apis.DataSet = NewDataSetApi(client, nil)
	cb.Apis.TypeConfig = NewTypeConfigApi(client, nil)
	return cb
}

func (cb *CurdBuilder) Route(prefix string, r gin.IRouter, pick []string) *gin.RouterGroup {
	if !strings.HasPrefix("/", prefix) {
		prefix = go_tool.StringJoin("/", prefix)
	}
	g := r.Group(prefix)

	hasPick := pick != nil && len(pick) > 0
	if !hasPick || go_tool.InArray(pick, TypeDataSet) {
		cb.Group(g, "dataset", cb.Apis.DataSet)
	}
	if !hasPick || go_tool.InArray(pick, TypeTypeConfig) {
		cb.Group(g, "typeconfig", cb.Apis.TypeConfig)
	}

	return g
}

func (cb *CurdBuilder) Group(group *gin.RouterGroup, path string, api Endpoint) {
	apiGroup := group.Group(path)
	apiGroup.GET("", contact.GinHelpHandle(api.List))
	apiGroup.GET("/:id", contact.GinHelpHandle(api.Get))
	apiGroup.POST("", contact.GinHelpHandle(api.Create))
	apiGroup.PATCH("/:id", contact.GinHelpHandle(api.Update))
	apiGroup.DELETE("/:id", contact.GinHelpHandle(api.Delete))
}

type DataSetApi struct {
	*Api
	Filter             DataSetApiFilter
	SkipCreateAutoEdge bool
	SkipUpdateAutoEdge bool
}

type DataSetApiFilter struct {
	CreatePipe   func(help *contact.GinHelp, createPipe *DataSetCreate)
	CreateAfter  func(help *contact.GinHelp, item *DataSet)
	UpdatePipe   func(help *contact.GinHelp, updatePipe *DataSetUpdateOne)
	UpdateAfter  func(help *contact.GinHelp, item *DataSet)
	ListPipe     func(help *contact.GinHelp, listPipe *DataSetQuery)
	ListData     func(help *contact.GinHelp, items []*DataSet) interface{}
	DeleteBefore func(help *contact.GinHelp, item *DataSet)
	GetPipe      func(help *contact.GinHelp, getPipe *DataSetQuery)
}

func NewDataSetApi(client *Client, opt *ApiOption) *DataSetApi {
	return &DataSetApi{Api: newApi(client, opt)}
}

func (c *DataSetApi) List(help *contact.GinHelp) {
	help.ResourcePage(func(start int, size int) (interface{}, int) {
		pipe := c.Client.DataSet.Query()
		if c.Filter.ListPipe != nil {
			c.Filter.ListPipe(help, pipe)
		}
		clonePipe := pipe.Clone()

		pipe = pipe.Offset(start).Limit(size)
		items := pipe.AllX(help.AppContext)

		var data interface{} = items
		if c.Filter.ListData != nil {
			data = c.Filter.ListData(help, items)
		}
		return data, clonePipe.CountX(help.AppContext)
	})
}

func (c *DataSetApi) Delete(help *contact.GinHelp) {
	uri := &struct {
		Id int `uri:"id"`
	}{}
	help.InValidBindUri(uri)

	item := c.Client.DataSet.GetX(help.AppContext, uri.Id)
	if c.Filter.DeleteBefore != nil {
		c.Filter.DeleteBefore(help, item)
	}
	c.Client.DataSet.DeleteOne(item).ExecX(help.AppContext)
	help.ResourceDelete()
}

func (c *DataSetApi) Create(help *contact.GinHelp) {
	body := &struct {
		Payload DataSet
	}{}
	help.InValidBind(body)

	pipe := c.Client.DataSet.Create()
	if !c.Fields.Create.Has || c.Fields.Create.Fields[dataset.FieldType] {
		pipe.SetType(body.Payload.Type)
	}
	if !c.Fields.Create.Has || c.Fields.Create.Fields[dataset.FieldConfig] {
		pipe.SetConfig(body.Payload.Config)
	}

	if c.Filter.CreatePipe != nil {
		c.Filter.CreatePipe(help, pipe)
	}

	item := pipe.SaveX(help.AppContext)

	if c.Filter.CreateAfter != nil {
		c.Filter.CreateAfter(help, item)
	}

	help.Resource(item)
}

func (c *DataSetApi) Update(help *contact.GinHelp) {
	uri := struct {
		Id int `uri:"id"`
	}{}
	help.InValidBindUri(&uri)

	body := &struct {
		Payload DataSet
	}{}

	item := c.Client.DataSet.GetX(help.AppContext, uri.Id)
	if item == nil {
		help.InValid("resource", "not found")
	} else {
		pipe := item.Update()
		if !c.Fields.Update.Has || c.Fields.Update.Fields[dataset.FieldType] {
			pipe.SetType(body.Payload.Type)
		}
		if !c.Fields.Update.Has || c.Fields.Update.Fields[dataset.FieldConfig] {
			pipe.SetConfig(body.Payload.Config)
		}

		if c.Filter.UpdatePipe != nil {
			c.Filter.UpdatePipe(help, pipe)
		}
		item = pipe.SaveX(help.AppContext)
		if c.Filter.UpdateAfter != nil {
			c.Filter.UpdateAfter(help, item)
		}
	}
	help.Resource(item)
}

func (c *DataSetApi) Get(help *contact.GinHelp) {
	uri := struct {
		Id int `uri:"id"`
	}{}
	help.InValidBindUri(&uri)

	pipe := c.Client.DataSet.Query().Where(dataset.ID(uri.Id))
	if c.Filter.GetPipe != nil {
		c.Filter.GetPipe(help, pipe)
	}
	help.Resource(pipe.FirstX(help.AppContext))
}

type TypeConfigApi struct {
	*Api
	Filter             TypeConfigApiFilter
	SkipCreateAutoEdge bool
	SkipUpdateAutoEdge bool
}

type TypeConfigApiFilter struct {
	CreatePipe   func(help *contact.GinHelp, createPipe *TypeConfigCreate)
	CreateAfter  func(help *contact.GinHelp, item *TypeConfig)
	UpdatePipe   func(help *contact.GinHelp, updatePipe *TypeConfigUpdateOne)
	UpdateAfter  func(help *contact.GinHelp, item *TypeConfig)
	ListPipe     func(help *contact.GinHelp, listPipe *TypeConfigQuery)
	ListData     func(help *contact.GinHelp, items []*TypeConfig) interface{}
	DeleteBefore func(help *contact.GinHelp, item *TypeConfig)
	GetPipe      func(help *contact.GinHelp, getPipe *TypeConfigQuery)
}

func NewTypeConfigApi(client *Client, opt *ApiOption) *TypeConfigApi {
	return &TypeConfigApi{Api: newApi(client, opt)}
}

func (c *TypeConfigApi) List(help *contact.GinHelp) {
	help.ResourcePage(func(start int, size int) (interface{}, int) {
		pipe := c.Client.TypeConfig.Query()
		if c.Filter.ListPipe != nil {
			c.Filter.ListPipe(help, pipe)
		}
		clonePipe := pipe.Clone()

		pipe = pipe.Offset(start).Limit(size)
		items := pipe.AllX(help.AppContext)

		var data interface{} = items
		if c.Filter.ListData != nil {
			data = c.Filter.ListData(help, items)
		}
		return data, clonePipe.CountX(help.AppContext)
	})
}

func (c *TypeConfigApi) Delete(help *contact.GinHelp) {
	uri := &struct {
		Id schema.TypeKey `uri:"id"`
	}{}
	help.InValidBindUri(uri)

	item := c.Client.TypeConfig.GetX(help.AppContext, uri.Id)
	if c.Filter.DeleteBefore != nil {
		c.Filter.DeleteBefore(help, item)
	}
	c.Client.TypeConfig.DeleteOne(item).ExecX(help.AppContext)
	help.ResourceDelete()
}

func (c *TypeConfigApi) Create(help *contact.GinHelp) {
	body := &struct {
		Payload TypeConfig
	}{}
	help.InValidBind(body)

	pipe := c.Client.TypeConfig.Create()
	if !c.Fields.Create.Has || c.Fields.Create.Fields[typeconfig.FieldType] {
		pipe.SetType(body.Payload.Type)
	}
	if !c.Fields.Create.Has || c.Fields.Create.Fields[typeconfig.FieldConfig] {
		pipe.SetConfig(body.Payload.Config)
	}

	if c.Filter.CreatePipe != nil {
		c.Filter.CreatePipe(help, pipe)
	}

	item := pipe.SaveX(help.AppContext)

	if c.Filter.CreateAfter != nil {
		c.Filter.CreateAfter(help, item)
	}

	help.Resource(item)
}

func (c *TypeConfigApi) Update(help *contact.GinHelp) {
	uri := struct {
		Id schema.TypeKey `uri:"id"`
	}{}
	help.InValidBindUri(&uri)

	body := &struct {
		Payload TypeConfig
	}{}

	item := c.Client.TypeConfig.GetX(help.AppContext, uri.Id)
	if item == nil {
		help.InValid("resource", "not found")
	} else {
		pipe := item.Update()
		if !c.Fields.Update.Has || c.Fields.Update.Fields[typeconfig.FieldType] {
			pipe.SetType(body.Payload.Type)
		}
		if !c.Fields.Update.Has || c.Fields.Update.Fields[typeconfig.FieldConfig] {
			pipe.SetConfig(body.Payload.Config)
		}

		if c.Filter.UpdatePipe != nil {
			c.Filter.UpdatePipe(help, pipe)
		}
		item = pipe.SaveX(help.AppContext)
		if c.Filter.UpdateAfter != nil {
			c.Filter.UpdateAfter(help, item)
		}
	}
	help.Resource(item)
}

func (c *TypeConfigApi) Get(help *contact.GinHelp) {
	uri := struct {
		Id schema.TypeKey `uri:"id"`
	}{}
	help.InValidBindUri(&uri)

	pipe := c.Client.TypeConfig.Query().Where(typeconfig.ID(uri.Id))
	if c.Filter.GetPipe != nil {
		c.Filter.GetPipe(help, pipe)
	}
	help.Resource(pipe.FirstX(help.AppContext))
}
