// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"log"

	"github.com/maxiloEmmmm/diy-datav/pkg/model/migrate"

	"github.com/maxiloEmmmm/diy-datav/pkg/model/assets"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/dataset"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/typeconfig"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/user"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/view"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/viewblock"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Assets is the client for interacting with the Assets builders.
	Assets *AssetsClient
	// DataSet is the client for interacting with the DataSet builders.
	DataSet *DataSetClient
	// TypeConfig is the client for interacting with the TypeConfig builders.
	TypeConfig *TypeConfigClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// View is the client for interacting with the View builders.
	View *ViewClient
	// ViewBlock is the client for interacting with the ViewBlock builders.
	ViewBlock *ViewBlockClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Assets = NewAssetsClient(c.config)
	c.DataSet = NewDataSetClient(c.config)
	c.TypeConfig = NewTypeConfigClient(c.config)
	c.User = NewUserClient(c.config)
	c.View = NewViewClient(c.config)
	c.ViewBlock = NewViewBlockClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("model: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("model: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Assets:     NewAssetsClient(cfg),
		DataSet:    NewDataSetClient(cfg),
		TypeConfig: NewTypeConfigClient(cfg),
		User:       NewUserClient(cfg),
		View:       NewViewClient(cfg),
		ViewBlock:  NewViewBlockClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:     cfg,
		Assets:     NewAssetsClient(cfg),
		DataSet:    NewDataSetClient(cfg),
		TypeConfig: NewTypeConfigClient(cfg),
		User:       NewUserClient(cfg),
		View:       NewViewClient(cfg),
		ViewBlock:  NewViewBlockClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Assets.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Assets.Use(hooks...)
	c.DataSet.Use(hooks...)
	c.TypeConfig.Use(hooks...)
	c.User.Use(hooks...)
	c.View.Use(hooks...)
	c.ViewBlock.Use(hooks...)
}

// AssetsClient is a client for the Assets schema.
type AssetsClient struct {
	config
}

// NewAssetsClient returns a client for the Assets from the given config.
func NewAssetsClient(c config) *AssetsClient {
	return &AssetsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assets.Hooks(f(g(h())))`.
func (c *AssetsClient) Use(hooks ...Hook) {
	c.hooks.Assets = append(c.hooks.Assets, hooks...)
}

// Create returns a create builder for Assets.
func (c *AssetsClient) Create() *AssetsCreate {
	mutation := newAssetsMutation(c.config, OpCreate)
	return &AssetsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Assets entities.
func (c *AssetsClient) CreateBulk(builders ...*AssetsCreate) *AssetsCreateBulk {
	return &AssetsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Assets.
func (c *AssetsClient) Update() *AssetsUpdate {
	mutation := newAssetsMutation(c.config, OpUpdate)
	return &AssetsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetsClient) UpdateOne(a *Assets) *AssetsUpdateOne {
	mutation := newAssetsMutation(c.config, OpUpdateOne, withAssets(a))
	return &AssetsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetsClient) UpdateOneID(id int) *AssetsUpdateOne {
	mutation := newAssetsMutation(c.config, OpUpdateOne, withAssetsID(id))
	return &AssetsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Assets.
func (c *AssetsClient) Delete() *AssetsDelete {
	mutation := newAssetsMutation(c.config, OpDelete)
	return &AssetsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AssetsClient) DeleteOne(a *Assets) *AssetsDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AssetsClient) DeleteOneID(id int) *AssetsDeleteOne {
	builder := c.Delete().Where(assets.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetsDeleteOne{builder}
}

// Query returns a query builder for Assets.
func (c *AssetsClient) Query() *AssetsQuery {
	return &AssetsQuery{
		config: c.config,
	}
}

// Get returns a Assets entity by its id.
func (c *AssetsClient) Get(ctx context.Context, id int) (*Assets, error) {
	return c.Query().Where(assets.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetsClient) GetX(ctx context.Context, id int) *Assets {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryView queries the view edge of a Assets.
func (c *AssetsClient) QueryView(a *Assets) *ViewQuery {
	query := &ViewQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assets.Table, assets.FieldID, id),
			sqlgraph.To(view.Table, view.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assets.ViewTable, assets.ViewColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetsClient) Hooks() []Hook {
	return c.hooks.Assets
}

// DataSetClient is a client for the DataSet schema.
type DataSetClient struct {
	config
}

// NewDataSetClient returns a client for the DataSet from the given config.
func NewDataSetClient(c config) *DataSetClient {
	return &DataSetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dataset.Hooks(f(g(h())))`.
func (c *DataSetClient) Use(hooks ...Hook) {
	c.hooks.DataSet = append(c.hooks.DataSet, hooks...)
}

// Create returns a create builder for DataSet.
func (c *DataSetClient) Create() *DataSetCreate {
	mutation := newDataSetMutation(c.config, OpCreate)
	return &DataSetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DataSet entities.
func (c *DataSetClient) CreateBulk(builders ...*DataSetCreate) *DataSetCreateBulk {
	return &DataSetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DataSet.
func (c *DataSetClient) Update() *DataSetUpdate {
	mutation := newDataSetMutation(c.config, OpUpdate)
	return &DataSetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DataSetClient) UpdateOne(ds *DataSet) *DataSetUpdateOne {
	mutation := newDataSetMutation(c.config, OpUpdateOne, withDataSet(ds))
	return &DataSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DataSetClient) UpdateOneID(id int) *DataSetUpdateOne {
	mutation := newDataSetMutation(c.config, OpUpdateOne, withDataSetID(id))
	return &DataSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DataSet.
func (c *DataSetClient) Delete() *DataSetDelete {
	mutation := newDataSetMutation(c.config, OpDelete)
	return &DataSetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DataSetClient) DeleteOne(ds *DataSet) *DataSetDeleteOne {
	return c.DeleteOneID(ds.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DataSetClient) DeleteOneID(id int) *DataSetDeleteOne {
	builder := c.Delete().Where(dataset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DataSetDeleteOne{builder}
}

// Query returns a query builder for DataSet.
func (c *DataSetClient) Query() *DataSetQuery {
	return &DataSetQuery{
		config: c.config,
	}
}

// Get returns a DataSet entity by its id.
func (c *DataSetClient) Get(ctx context.Context, id int) (*DataSet, error) {
	return c.Query().Where(dataset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DataSetClient) GetX(ctx context.Context, id int) *DataSet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlock queries the block edge of a DataSet.
func (c *DataSetClient) QueryBlock(ds *DataSet) *ViewBlockQuery {
	query := &ViewBlockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ds.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dataset.Table, dataset.FieldID, id),
			sqlgraph.To(viewblock.Table, viewblock.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dataset.BlockTable, dataset.BlockColumn),
		)
		fromV = sqlgraph.Neighbors(ds.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DataSetClient) Hooks() []Hook {
	return c.hooks.DataSet
}

// TypeConfigClient is a client for the TypeConfig schema.
type TypeConfigClient struct {
	config
}

// NewTypeConfigClient returns a client for the TypeConfig from the given config.
func NewTypeConfigClient(c config) *TypeConfigClient {
	return &TypeConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `typeconfig.Hooks(f(g(h())))`.
func (c *TypeConfigClient) Use(hooks ...Hook) {
	c.hooks.TypeConfig = append(c.hooks.TypeConfig, hooks...)
}

// Create returns a create builder for TypeConfig.
func (c *TypeConfigClient) Create() *TypeConfigCreate {
	mutation := newTypeConfigMutation(c.config, OpCreate)
	return &TypeConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TypeConfig entities.
func (c *TypeConfigClient) CreateBulk(builders ...*TypeConfigCreate) *TypeConfigCreateBulk {
	return &TypeConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TypeConfig.
func (c *TypeConfigClient) Update() *TypeConfigUpdate {
	mutation := newTypeConfigMutation(c.config, OpUpdate)
	return &TypeConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TypeConfigClient) UpdateOne(tc *TypeConfig) *TypeConfigUpdateOne {
	mutation := newTypeConfigMutation(c.config, OpUpdateOne, withTypeConfig(tc))
	return &TypeConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TypeConfigClient) UpdateOneID(id int) *TypeConfigUpdateOne {
	mutation := newTypeConfigMutation(c.config, OpUpdateOne, withTypeConfigID(id))
	return &TypeConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TypeConfig.
func (c *TypeConfigClient) Delete() *TypeConfigDelete {
	mutation := newTypeConfigMutation(c.config, OpDelete)
	return &TypeConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TypeConfigClient) DeleteOne(tc *TypeConfig) *TypeConfigDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TypeConfigClient) DeleteOneID(id int) *TypeConfigDeleteOne {
	builder := c.Delete().Where(typeconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TypeConfigDeleteOne{builder}
}

// Query returns a query builder for TypeConfig.
func (c *TypeConfigClient) Query() *TypeConfigQuery {
	return &TypeConfigQuery{
		config: c.config,
	}
}

// Get returns a TypeConfig entity by its id.
func (c *TypeConfigClient) Get(ctx context.Context, id int) (*TypeConfig, error) {
	return c.Query().Where(typeconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TypeConfigClient) GetX(ctx context.Context, id int) *TypeConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TypeConfigClient) Hooks() []Hook {
	return c.hooks.TypeConfig
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// ViewClient is a client for the View schema.
type ViewClient struct {
	config
}

// NewViewClient returns a client for the View from the given config.
func NewViewClient(c config) *ViewClient {
	return &ViewClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `view.Hooks(f(g(h())))`.
func (c *ViewClient) Use(hooks ...Hook) {
	c.hooks.View = append(c.hooks.View, hooks...)
}

// Create returns a create builder for View.
func (c *ViewClient) Create() *ViewCreate {
	mutation := newViewMutation(c.config, OpCreate)
	return &ViewCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of View entities.
func (c *ViewClient) CreateBulk(builders ...*ViewCreate) *ViewCreateBulk {
	return &ViewCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for View.
func (c *ViewClient) Update() *ViewUpdate {
	mutation := newViewMutation(c.config, OpUpdate)
	return &ViewUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ViewClient) UpdateOne(v *View) *ViewUpdateOne {
	mutation := newViewMutation(c.config, OpUpdateOne, withView(v))
	return &ViewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ViewClient) UpdateOneID(id int) *ViewUpdateOne {
	mutation := newViewMutation(c.config, OpUpdateOne, withViewID(id))
	return &ViewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for View.
func (c *ViewClient) Delete() *ViewDelete {
	mutation := newViewMutation(c.config, OpDelete)
	return &ViewDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ViewClient) DeleteOne(v *View) *ViewDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ViewClient) DeleteOneID(id int) *ViewDeleteOne {
	builder := c.Delete().Where(view.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ViewDeleteOne{builder}
}

// Query returns a query builder for View.
func (c *ViewClient) Query() *ViewQuery {
	return &ViewQuery{
		config: c.config,
	}
}

// Get returns a View entity by its id.
func (c *ViewClient) Get(ctx context.Context, id int) (*View, error) {
	return c.Query().Where(view.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ViewClient) GetX(ctx context.Context, id int) *View {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBg queries the bg edge of a View.
func (c *ViewClient) QueryBg(v *View) *AssetsQuery {
	query := &AssetsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(view.Table, view.FieldID, id),
			sqlgraph.To(assets.Table, assets.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, view.BgTable, view.BgColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlocks queries the blocks edge of a View.
func (c *ViewClient) QueryBlocks(v *View) *ViewBlockQuery {
	query := &ViewBlockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(view.Table, view.FieldID, id),
			sqlgraph.To(viewblock.Table, viewblock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, view.BlocksTable, view.BlocksColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ViewClient) Hooks() []Hook {
	return c.hooks.View
}

// ViewBlockClient is a client for the ViewBlock schema.
type ViewBlockClient struct {
	config
}

// NewViewBlockClient returns a client for the ViewBlock from the given config.
func NewViewBlockClient(c config) *ViewBlockClient {
	return &ViewBlockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `viewblock.Hooks(f(g(h())))`.
func (c *ViewBlockClient) Use(hooks ...Hook) {
	c.hooks.ViewBlock = append(c.hooks.ViewBlock, hooks...)
}

// Create returns a create builder for ViewBlock.
func (c *ViewBlockClient) Create() *ViewBlockCreate {
	mutation := newViewBlockMutation(c.config, OpCreate)
	return &ViewBlockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ViewBlock entities.
func (c *ViewBlockClient) CreateBulk(builders ...*ViewBlockCreate) *ViewBlockCreateBulk {
	return &ViewBlockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ViewBlock.
func (c *ViewBlockClient) Update() *ViewBlockUpdate {
	mutation := newViewBlockMutation(c.config, OpUpdate)
	return &ViewBlockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ViewBlockClient) UpdateOne(vb *ViewBlock) *ViewBlockUpdateOne {
	mutation := newViewBlockMutation(c.config, OpUpdateOne, withViewBlock(vb))
	return &ViewBlockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ViewBlockClient) UpdateOneID(id int) *ViewBlockUpdateOne {
	mutation := newViewBlockMutation(c.config, OpUpdateOne, withViewBlockID(id))
	return &ViewBlockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ViewBlock.
func (c *ViewBlockClient) Delete() *ViewBlockDelete {
	mutation := newViewBlockMutation(c.config, OpDelete)
	return &ViewBlockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ViewBlockClient) DeleteOne(vb *ViewBlock) *ViewBlockDeleteOne {
	return c.DeleteOneID(vb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ViewBlockClient) DeleteOneID(id int) *ViewBlockDeleteOne {
	builder := c.Delete().Where(viewblock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ViewBlockDeleteOne{builder}
}

// Query returns a query builder for ViewBlock.
func (c *ViewBlockClient) Query() *ViewBlockQuery {
	return &ViewBlockQuery{
		config: c.config,
	}
}

// Get returns a ViewBlock entity by its id.
func (c *ViewBlockClient) Get(ctx context.Context, id int) (*ViewBlock, error) {
	return c.Query().Where(viewblock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ViewBlockClient) GetX(ctx context.Context, id int) *ViewBlock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryView queries the view edge of a ViewBlock.
func (c *ViewBlockClient) QueryView(vb *ViewBlock) *ViewQuery {
	query := &ViewQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(viewblock.Table, viewblock.FieldID, id),
			sqlgraph.To(view.Table, view.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, viewblock.ViewTable, viewblock.ViewColumn),
		)
		fromV = sqlgraph.Neighbors(vb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDataset queries the dataset edge of a ViewBlock.
func (c *ViewBlockClient) QueryDataset(vb *ViewBlock) *DataSetQuery {
	query := &DataSetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := vb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(viewblock.Table, viewblock.FieldID, id),
			sqlgraph.To(dataset.Table, dataset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, viewblock.DatasetTable, viewblock.DatasetColumn),
		)
		fromV = sqlgraph.Neighbors(vb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ViewBlockClient) Hooks() []Hook {
	return c.hooks.ViewBlock
}
