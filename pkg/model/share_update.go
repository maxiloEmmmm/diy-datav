// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/predicate"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/share"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/user"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/view"
)

// ShareUpdate is the builder for updating Share entities.
type ShareUpdate struct {
	config
	hooks    []Hook
	mutation *ShareMutation
}

// Where adds a new predicate for the ShareUpdate builder.
func (su *ShareUpdate) Where(ps ...predicate.Share) *ShareUpdate {
	su.mutation.predicates = append(su.mutation.predicates, ps...)
	return su
}

// SetEndAt sets the "end_at" field.
func (su *ShareUpdate) SetEndAt(t time.Time) *ShareUpdate {
	su.mutation.SetEndAt(t)
	return su
}

// SetViewID sets the "view" edge to the View entity by ID.
func (su *ShareUpdate) SetViewID(id int) *ShareUpdate {
	su.mutation.SetViewID(id)
	return su
}

// SetNillableViewID sets the "view" edge to the View entity by ID if the given value is not nil.
func (su *ShareUpdate) SetNillableViewID(id *int) *ShareUpdate {
	if id != nil {
		su = su.SetViewID(*id)
	}
	return su
}

// SetView sets the "view" edge to the View entity.
func (su *ShareUpdate) SetView(v *View) *ShareUpdate {
	return su.SetViewID(v.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (su *ShareUpdate) SetCreatorID(id int) *ShareUpdate {
	su.mutation.SetCreatorID(id)
	return su
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (su *ShareUpdate) SetNillableCreatorID(id *int) *ShareUpdate {
	if id != nil {
		su = su.SetCreatorID(*id)
	}
	return su
}

// SetCreator sets the "creator" edge to the User entity.
func (su *ShareUpdate) SetCreator(u *User) *ShareUpdate {
	return su.SetCreatorID(u.ID)
}

// Mutation returns the ShareMutation object of the builder.
func (su *ShareUpdate) Mutation() *ShareMutation {
	return su.mutation
}

// ClearView clears the "view" edge to the View entity.
func (su *ShareUpdate) ClearView() *ShareUpdate {
	su.mutation.ClearView()
	return su
}

// ClearCreator clears the "creator" edge to the User entity.
func (su *ShareUpdate) ClearCreator() *ShareUpdate {
	su.mutation.ClearCreator()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShareUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShareUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShareUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShareUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ShareUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   share.Table,
			Columns: share.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: share.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: share.FieldEndAt,
		})
	}
	if su.mutation.ViewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.ViewTable,
			Columns: []string{share.ViewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: view.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ViewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.ViewTable,
			Columns: []string{share.ViewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: view.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.CreatorTable,
			Columns: []string{share.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.CreatorTable,
			Columns: []string{share.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{share.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShareUpdateOne is the builder for updating a single Share entity.
type ShareUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShareMutation
}

// SetEndAt sets the "end_at" field.
func (suo *ShareUpdateOne) SetEndAt(t time.Time) *ShareUpdateOne {
	suo.mutation.SetEndAt(t)
	return suo
}

// SetViewID sets the "view" edge to the View entity by ID.
func (suo *ShareUpdateOne) SetViewID(id int) *ShareUpdateOne {
	suo.mutation.SetViewID(id)
	return suo
}

// SetNillableViewID sets the "view" edge to the View entity by ID if the given value is not nil.
func (suo *ShareUpdateOne) SetNillableViewID(id *int) *ShareUpdateOne {
	if id != nil {
		suo = suo.SetViewID(*id)
	}
	return suo
}

// SetView sets the "view" edge to the View entity.
func (suo *ShareUpdateOne) SetView(v *View) *ShareUpdateOne {
	return suo.SetViewID(v.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (suo *ShareUpdateOne) SetCreatorID(id int) *ShareUpdateOne {
	suo.mutation.SetCreatorID(id)
	return suo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (suo *ShareUpdateOne) SetNillableCreatorID(id *int) *ShareUpdateOne {
	if id != nil {
		suo = suo.SetCreatorID(*id)
	}
	return suo
}

// SetCreator sets the "creator" edge to the User entity.
func (suo *ShareUpdateOne) SetCreator(u *User) *ShareUpdateOne {
	return suo.SetCreatorID(u.ID)
}

// Mutation returns the ShareMutation object of the builder.
func (suo *ShareUpdateOne) Mutation() *ShareMutation {
	return suo.mutation
}

// ClearView clears the "view" edge to the View entity.
func (suo *ShareUpdateOne) ClearView() *ShareUpdateOne {
	suo.mutation.ClearView()
	return suo
}

// ClearCreator clears the "creator" edge to the User entity.
func (suo *ShareUpdateOne) ClearCreator() *ShareUpdateOne {
	suo.mutation.ClearCreator()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShareUpdateOne) Select(field string, fields ...string) *ShareUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Share entity.
func (suo *ShareUpdateOne) Save(ctx context.Context) (*Share, error) {
	var (
		err  error
		node *Share
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShareUpdateOne) SaveX(ctx context.Context) *Share {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShareUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShareUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ShareUpdateOne) sqlSave(ctx context.Context) (_node *Share, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   share.Table,
			Columns: share.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: share.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Share.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, share.FieldID)
		for _, f := range fields {
			if !share.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != share.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: share.FieldEndAt,
		})
	}
	if suo.mutation.ViewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.ViewTable,
			Columns: []string{share.ViewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: view.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ViewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.ViewTable,
			Columns: []string{share.ViewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: view.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.CreatorTable,
			Columns: []string{share.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.CreatorTable,
			Columns: []string{share.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Share{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{share.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
