// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/dataset"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/viewblock"
)

// DataSetCreate is the builder for creating a DataSet entity.
type DataSetCreate struct {
	config
	mutation *DataSetMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (dsc *DataSetCreate) SetType(s string) *DataSetCreate {
	dsc.mutation.SetType(s)
	return dsc
}

// SetTitle sets the "title" field.
func (dsc *DataSetCreate) SetTitle(s string) *DataSetCreate {
	dsc.mutation.SetTitle(s)
	return dsc
}

// SetConfig sets the "config" field.
func (dsc *DataSetCreate) SetConfig(s string) *DataSetCreate {
	dsc.mutation.SetConfig(s)
	return dsc
}

// SetBlockID sets the "block" edge to the ViewBlock entity by ID.
func (dsc *DataSetCreate) SetBlockID(id int) *DataSetCreate {
	dsc.mutation.SetBlockID(id)
	return dsc
}

// SetNillableBlockID sets the "block" edge to the ViewBlock entity by ID if the given value is not nil.
func (dsc *DataSetCreate) SetNillableBlockID(id *int) *DataSetCreate {
	if id != nil {
		dsc = dsc.SetBlockID(*id)
	}
	return dsc
}

// SetBlock sets the "block" edge to the ViewBlock entity.
func (dsc *DataSetCreate) SetBlock(v *ViewBlock) *DataSetCreate {
	return dsc.SetBlockID(v.ID)
}

// Mutation returns the DataSetMutation object of the builder.
func (dsc *DataSetCreate) Mutation() *DataSetMutation {
	return dsc.mutation
}

// Save creates the DataSet in the database.
func (dsc *DataSetCreate) Save(ctx context.Context) (*DataSet, error) {
	var (
		err  error
		node *DataSet
	)
	if len(dsc.hooks) == 0 {
		if err = dsc.check(); err != nil {
			return nil, err
		}
		node, err = dsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataSetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsc.check(); err != nil {
				return nil, err
			}
			dsc.mutation = mutation
			node, err = dsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dsc.hooks) - 1; i >= 0; i-- {
			mut = dsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DataSetCreate) SaveX(ctx context.Context) *DataSet {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DataSetCreate) check() error {
	if _, ok := dsc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("model: missing required field \"type\"")}
	}
	if v, ok := dsc.mutation.GetType(); ok {
		if err := dataset.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("model: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := dsc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New("model: missing required field \"title\"")}
	}
	if _, ok := dsc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New("model: missing required field \"config\"")}
	}
	return nil
}

func (dsc *DataSetCreate) sqlSave(ctx context.Context) (*DataSet, error) {
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dsc *DataSetCreate) createSpec() (*DataSet, *sqlgraph.CreateSpec) {
	var (
		_node = &DataSet{config: dsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dataset.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dataset.FieldID,
			},
		}
	)
	if value, ok := dsc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dataset.FieldType,
		})
		_node.Type = value
	}
	if value, ok := dsc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dataset.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := dsc.mutation.Config(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dataset.FieldConfig,
		})
		_node.Config = value
	}
	if nodes := dsc.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dataset.BlockTable,
			Columns: []string{dataset.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: viewblock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.view_block_dataset = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DataSetCreateBulk is the builder for creating many DataSet entities in bulk.
type DataSetCreateBulk struct {
	config
	builders []*DataSetCreate
}

// Save creates the DataSet entities in the database.
func (dscb *DataSetCreateBulk) Save(ctx context.Context) ([]*DataSet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DataSet, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DataSetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DataSetCreateBulk) SaveX(ctx context.Context) []*DataSet {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
