// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/assets"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/share"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/view"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/viewblock"
)

// ViewCreate is the builder for creating a View entity.
type ViewCreate struct {
	config
	mutation *ViewMutation
	hooks    []Hook
}

// SetDesc sets the "desc" field.
func (vc *ViewCreate) SetDesc(s string) *ViewCreate {
	vc.mutation.SetDesc(s)
	return vc
}

// SetConfig sets the "config" field.
func (vc *ViewCreate) SetConfig(s string) *ViewCreate {
	vc.mutation.SetConfig(s)
	return vc
}

// SetBgID sets the "bg" edge to the Assets entity by ID.
func (vc *ViewCreate) SetBgID(id int) *ViewCreate {
	vc.mutation.SetBgID(id)
	return vc
}

// SetNillableBgID sets the "bg" edge to the Assets entity by ID if the given value is not nil.
func (vc *ViewCreate) SetNillableBgID(id *int) *ViewCreate {
	if id != nil {
		vc = vc.SetBgID(*id)
	}
	return vc
}

// SetBg sets the "bg" edge to the Assets entity.
func (vc *ViewCreate) SetBg(a *Assets) *ViewCreate {
	return vc.SetBgID(a.ID)
}

// AddBlockIDs adds the "blocks" edge to the ViewBlock entity by IDs.
func (vc *ViewCreate) AddBlockIDs(ids ...int) *ViewCreate {
	vc.mutation.AddBlockIDs(ids...)
	return vc
}

// AddBlocks adds the "blocks" edges to the ViewBlock entity.
func (vc *ViewCreate) AddBlocks(v ...*ViewBlock) *ViewCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vc.AddBlockIDs(ids...)
}

// AddShareIDs adds the "share" edge to the Share entity by IDs.
func (vc *ViewCreate) AddShareIDs(ids ...int) *ViewCreate {
	vc.mutation.AddShareIDs(ids...)
	return vc
}

// AddShare adds the "share" edges to the Share entity.
func (vc *ViewCreate) AddShare(s ...*Share) *ViewCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return vc.AddShareIDs(ids...)
}

// Mutation returns the ViewMutation object of the builder.
func (vc *ViewCreate) Mutation() *ViewMutation {
	return vc.mutation
}

// Save creates the View in the database.
func (vc *ViewCreate) Save(ctx context.Context) (*View, error) {
	var (
		err  error
		node *View
	)
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ViewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			node, err = vc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *ViewCreate) SaveX(ctx context.Context) *View {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (vc *ViewCreate) check() error {
	if _, ok := vc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New("model: missing required field \"desc\"")}
	}
	if v, ok := vc.mutation.Desc(); ok {
		if err := view.DescValidator(v); err != nil {
			return &ValidationError{Name: "desc", err: fmt.Errorf("model: validator failed for field \"desc\": %w", err)}
		}
	}
	if _, ok := vc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New("model: missing required field \"config\"")}
	}
	return nil
}

func (vc *ViewCreate) sqlSave(ctx context.Context) (*View, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *ViewCreate) createSpec() (*View, *sqlgraph.CreateSpec) {
	var (
		_node = &View{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: view.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: view.FieldID,
			},
		}
	)
	if value, ok := vc.mutation.Desc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: view.FieldDesc,
		})
		_node.Desc = value
	}
	if value, ok := vc.mutation.Config(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: view.FieldConfig,
		})
		_node.Config = value
	}
	if nodes := vc.mutation.BgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   view.BgTable,
			Columns: []string{view.BgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: assets.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.assets_view = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   view.BlocksTable,
			Columns: []string{view.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: viewblock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.ShareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   view.ShareTable,
			Columns: []string{view.ShareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: share.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ViewCreateBulk is the builder for creating many View entities in bulk.
type ViewCreateBulk struct {
	config
	builders []*ViewCreate
}

// Save creates the View entities in the database.
func (vcb *ViewCreateBulk) Save(ctx context.Context) ([]*View, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*View, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ViewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *ViewCreateBulk) SaveX(ctx context.Context) []*View {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
