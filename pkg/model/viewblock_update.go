// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/dataset"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/predicate"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/view"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/viewblock"
)

// ViewBlockUpdate is the builder for updating ViewBlock entities.
type ViewBlockUpdate struct {
	config
	hooks    []Hook
	mutation *ViewBlockMutation
}

// Where adds a new predicate for the ViewBlockUpdate builder.
func (vbu *ViewBlockUpdate) Where(ps ...predicate.ViewBlock) *ViewBlockUpdate {
	vbu.mutation.predicates = append(vbu.mutation.predicates, ps...)
	return vbu
}

// SetType sets the "type" field.
func (vbu *ViewBlockUpdate) SetType(s string) *ViewBlockUpdate {
	vbu.mutation.SetType(s)
	return vbu
}

// SetConfig sets the "config" field.
func (vbu *ViewBlockUpdate) SetConfig(s string) *ViewBlockUpdate {
	vbu.mutation.SetConfig(s)
	return vbu
}

// SetViewID sets the "view" edge to the View entity by ID.
func (vbu *ViewBlockUpdate) SetViewID(id int) *ViewBlockUpdate {
	vbu.mutation.SetViewID(id)
	return vbu
}

// SetNillableViewID sets the "view" edge to the View entity by ID if the given value is not nil.
func (vbu *ViewBlockUpdate) SetNillableViewID(id *int) *ViewBlockUpdate {
	if id != nil {
		vbu = vbu.SetViewID(*id)
	}
	return vbu
}

// SetView sets the "view" edge to the View entity.
func (vbu *ViewBlockUpdate) SetView(v *View) *ViewBlockUpdate {
	return vbu.SetViewID(v.ID)
}

// AddDatasetIDs adds the "dataset" edge to the DataSet entity by IDs.
func (vbu *ViewBlockUpdate) AddDatasetIDs(ids ...int) *ViewBlockUpdate {
	vbu.mutation.AddDatasetIDs(ids...)
	return vbu
}

// AddDataset adds the "dataset" edges to the DataSet entity.
func (vbu *ViewBlockUpdate) AddDataset(d ...*DataSet) *ViewBlockUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vbu.AddDatasetIDs(ids...)
}

// Mutation returns the ViewBlockMutation object of the builder.
func (vbu *ViewBlockUpdate) Mutation() *ViewBlockMutation {
	return vbu.mutation
}

// ClearView clears the "view" edge to the View entity.
func (vbu *ViewBlockUpdate) ClearView() *ViewBlockUpdate {
	vbu.mutation.ClearView()
	return vbu
}

// ClearDataset clears all "dataset" edges to the DataSet entity.
func (vbu *ViewBlockUpdate) ClearDataset() *ViewBlockUpdate {
	vbu.mutation.ClearDataset()
	return vbu
}

// RemoveDatasetIDs removes the "dataset" edge to DataSet entities by IDs.
func (vbu *ViewBlockUpdate) RemoveDatasetIDs(ids ...int) *ViewBlockUpdate {
	vbu.mutation.RemoveDatasetIDs(ids...)
	return vbu
}

// RemoveDataset removes "dataset" edges to DataSet entities.
func (vbu *ViewBlockUpdate) RemoveDataset(d ...*DataSet) *ViewBlockUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vbu.RemoveDatasetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vbu *ViewBlockUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vbu.hooks) == 0 {
		if err = vbu.check(); err != nil {
			return 0, err
		}
		affected, err = vbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ViewBlockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vbu.check(); err != nil {
				return 0, err
			}
			vbu.mutation = mutation
			affected, err = vbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vbu.hooks) - 1; i >= 0; i-- {
			mut = vbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vbu *ViewBlockUpdate) SaveX(ctx context.Context) int {
	affected, err := vbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vbu *ViewBlockUpdate) Exec(ctx context.Context) error {
	_, err := vbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vbu *ViewBlockUpdate) ExecX(ctx context.Context) {
	if err := vbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vbu *ViewBlockUpdate) check() error {
	if v, ok := vbu.mutation.GetType(); ok {
		if err := viewblock.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("model: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (vbu *ViewBlockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   viewblock.Table,
			Columns: viewblock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: viewblock.FieldID,
			},
		},
	}
	if ps := vbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vbu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: viewblock.FieldType,
		})
	}
	if value, ok := vbu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: viewblock.FieldConfig,
		})
	}
	if vbu.mutation.ViewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viewblock.ViewTable,
			Columns: []string{viewblock.ViewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: view.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vbu.mutation.ViewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viewblock.ViewTable,
			Columns: []string{viewblock.ViewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: view.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vbu.mutation.DatasetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewblock.DatasetTable,
			Columns: []string{viewblock.DatasetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vbu.mutation.RemovedDatasetIDs(); len(nodes) > 0 && !vbu.mutation.DatasetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewblock.DatasetTable,
			Columns: []string{viewblock.DatasetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vbu.mutation.DatasetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewblock.DatasetTable,
			Columns: []string{viewblock.DatasetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viewblock.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ViewBlockUpdateOne is the builder for updating a single ViewBlock entity.
type ViewBlockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ViewBlockMutation
}

// SetType sets the "type" field.
func (vbuo *ViewBlockUpdateOne) SetType(s string) *ViewBlockUpdateOne {
	vbuo.mutation.SetType(s)
	return vbuo
}

// SetConfig sets the "config" field.
func (vbuo *ViewBlockUpdateOne) SetConfig(s string) *ViewBlockUpdateOne {
	vbuo.mutation.SetConfig(s)
	return vbuo
}

// SetViewID sets the "view" edge to the View entity by ID.
func (vbuo *ViewBlockUpdateOne) SetViewID(id int) *ViewBlockUpdateOne {
	vbuo.mutation.SetViewID(id)
	return vbuo
}

// SetNillableViewID sets the "view" edge to the View entity by ID if the given value is not nil.
func (vbuo *ViewBlockUpdateOne) SetNillableViewID(id *int) *ViewBlockUpdateOne {
	if id != nil {
		vbuo = vbuo.SetViewID(*id)
	}
	return vbuo
}

// SetView sets the "view" edge to the View entity.
func (vbuo *ViewBlockUpdateOne) SetView(v *View) *ViewBlockUpdateOne {
	return vbuo.SetViewID(v.ID)
}

// AddDatasetIDs adds the "dataset" edge to the DataSet entity by IDs.
func (vbuo *ViewBlockUpdateOne) AddDatasetIDs(ids ...int) *ViewBlockUpdateOne {
	vbuo.mutation.AddDatasetIDs(ids...)
	return vbuo
}

// AddDataset adds the "dataset" edges to the DataSet entity.
func (vbuo *ViewBlockUpdateOne) AddDataset(d ...*DataSet) *ViewBlockUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vbuo.AddDatasetIDs(ids...)
}

// Mutation returns the ViewBlockMutation object of the builder.
func (vbuo *ViewBlockUpdateOne) Mutation() *ViewBlockMutation {
	return vbuo.mutation
}

// ClearView clears the "view" edge to the View entity.
func (vbuo *ViewBlockUpdateOne) ClearView() *ViewBlockUpdateOne {
	vbuo.mutation.ClearView()
	return vbuo
}

// ClearDataset clears all "dataset" edges to the DataSet entity.
func (vbuo *ViewBlockUpdateOne) ClearDataset() *ViewBlockUpdateOne {
	vbuo.mutation.ClearDataset()
	return vbuo
}

// RemoveDatasetIDs removes the "dataset" edge to DataSet entities by IDs.
func (vbuo *ViewBlockUpdateOne) RemoveDatasetIDs(ids ...int) *ViewBlockUpdateOne {
	vbuo.mutation.RemoveDatasetIDs(ids...)
	return vbuo
}

// RemoveDataset removes "dataset" edges to DataSet entities.
func (vbuo *ViewBlockUpdateOne) RemoveDataset(d ...*DataSet) *ViewBlockUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return vbuo.RemoveDatasetIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vbuo *ViewBlockUpdateOne) Select(field string, fields ...string) *ViewBlockUpdateOne {
	vbuo.fields = append([]string{field}, fields...)
	return vbuo
}

// Save executes the query and returns the updated ViewBlock entity.
func (vbuo *ViewBlockUpdateOne) Save(ctx context.Context) (*ViewBlock, error) {
	var (
		err  error
		node *ViewBlock
	)
	if len(vbuo.hooks) == 0 {
		if err = vbuo.check(); err != nil {
			return nil, err
		}
		node, err = vbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ViewBlockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vbuo.check(); err != nil {
				return nil, err
			}
			vbuo.mutation = mutation
			node, err = vbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vbuo.hooks) - 1; i >= 0; i-- {
			mut = vbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vbuo *ViewBlockUpdateOne) SaveX(ctx context.Context) *ViewBlock {
	node, err := vbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vbuo *ViewBlockUpdateOne) Exec(ctx context.Context) error {
	_, err := vbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vbuo *ViewBlockUpdateOne) ExecX(ctx context.Context) {
	if err := vbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vbuo *ViewBlockUpdateOne) check() error {
	if v, ok := vbuo.mutation.GetType(); ok {
		if err := viewblock.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("model: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (vbuo *ViewBlockUpdateOne) sqlSave(ctx context.Context) (_node *ViewBlock, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   viewblock.Table,
			Columns: viewblock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: viewblock.FieldID,
			},
		},
	}
	id, ok := vbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ViewBlock.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, viewblock.FieldID)
		for _, f := range fields {
			if !viewblock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != viewblock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vbuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: viewblock.FieldType,
		})
	}
	if value, ok := vbuo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: viewblock.FieldConfig,
		})
	}
	if vbuo.mutation.ViewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viewblock.ViewTable,
			Columns: []string{viewblock.ViewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: view.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vbuo.mutation.ViewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viewblock.ViewTable,
			Columns: []string{viewblock.ViewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: view.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vbuo.mutation.DatasetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewblock.DatasetTable,
			Columns: []string{viewblock.DatasetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vbuo.mutation.RemovedDatasetIDs(); len(nodes) > 0 && !vbuo.mutation.DatasetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewblock.DatasetTable,
			Columns: []string{viewblock.DatasetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vbuo.mutation.DatasetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   viewblock.DatasetTable,
			Columns: []string{viewblock.DatasetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ViewBlock{config: vbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viewblock.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
