// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/view"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/viewblock"
)

// ViewBlock is the model entity for the ViewBlock schema.
type ViewBlock struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Config holds the value of the "config" field.
	Config string `json:"config,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ViewBlockQuery when eager-loading is set.
	Edges       ViewBlockEdges `json:"edges"`
	view_blocks *int
}

// ViewBlockEdges holds the relations/edges for other nodes in the graph.
type ViewBlockEdges struct {
	// View holds the value of the view edge.
	View *View `json:"view,omitempty"`
	// Dataset holds the value of the dataset edge.
	Dataset []*DataSet `json:"dataset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ViewOrErr returns the View value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ViewBlockEdges) ViewOrErr() (*View, error) {
	if e.loadedTypes[0] {
		if e.View == nil {
			// The edge view was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: view.Label}
		}
		return e.View, nil
	}
	return nil, &NotLoadedError{edge: "view"}
}

// DatasetOrErr returns the Dataset value or an error if the edge
// was not loaded in eager-loading.
func (e ViewBlockEdges) DatasetOrErr() ([]*DataSet, error) {
	if e.loadedTypes[1] {
		return e.Dataset, nil
	}
	return nil, &NotLoadedError{edge: "dataset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ViewBlock) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case viewblock.FieldID:
			values[i] = new(sql.NullInt64)
		case viewblock.FieldType, viewblock.FieldConfig:
			values[i] = new(sql.NullString)
		case viewblock.ForeignKeys[0]: // view_blocks
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ViewBlock", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ViewBlock fields.
func (vb *ViewBlock) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case viewblock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vb.ID = int(value.Int64)
		case viewblock.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				vb.Type = value.String
			}
		case viewblock.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				vb.Config = value.String
			}
		case viewblock.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field view_blocks", value)
			} else if value.Valid {
				vb.view_blocks = new(int)
				*vb.view_blocks = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryView queries the "view" edge of the ViewBlock entity.
func (vb *ViewBlock) QueryView() *ViewQuery {
	return (&ViewBlockClient{config: vb.config}).QueryView(vb)
}

// QueryDataset queries the "dataset" edge of the ViewBlock entity.
func (vb *ViewBlock) QueryDataset() *DataSetQuery {
	return (&ViewBlockClient{config: vb.config}).QueryDataset(vb)
}

// Update returns a builder for updating this ViewBlock.
// Note that you need to call ViewBlock.Unwrap() before calling this method if this ViewBlock
// was returned from a transaction, and the transaction was committed or rolled back.
func (vb *ViewBlock) Update() *ViewBlockUpdateOne {
	return (&ViewBlockClient{config: vb.config}).UpdateOne(vb)
}

// Unwrap unwraps the ViewBlock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vb *ViewBlock) Unwrap() *ViewBlock {
	tx, ok := vb.config.driver.(*txDriver)
	if !ok {
		panic("model: ViewBlock is not a transactional entity")
	}
	vb.config.driver = tx.drv
	return vb
}

// String implements the fmt.Stringer.
func (vb *ViewBlock) String() string {
	var builder strings.Builder
	builder.WriteString("ViewBlock(")
	builder.WriteString(fmt.Sprintf("id=%v", vb.ID))
	builder.WriteString(", type=")
	builder.WriteString(vb.Type)
	builder.WriteString(", config=")
	builder.WriteString(vb.Config)
	builder.WriteByte(')')
	return builder.String()
}

// ViewBlocks is a parsable slice of ViewBlock.
type ViewBlocks []*ViewBlock

func (vb ViewBlocks) config(cfg config) {
	for _i := range vb {
		vb[_i].config = cfg
	}
}
