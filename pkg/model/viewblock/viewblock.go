// Code generated by entc, DO NOT EDIT.

package viewblock

const (
	// Label holds the string label denoting the viewblock type in the database.
	Label = "view_block"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// EdgeView holds the string denoting the view edge name in mutations.
	EdgeView = "view"
	// EdgeDataset holds the string denoting the dataset edge name in mutations.
	EdgeDataset = "dataset"
	// Table holds the table name of the viewblock in the database.
	Table = "view_blocks"
	// ViewTable is the table the holds the view relation/edge.
	ViewTable = "view_blocks"
	// ViewInverseTable is the table name for the View entity.
	// It exists in this package in order to avoid circular dependency with the "view" package.
	ViewInverseTable = "views"
	// ViewColumn is the table column denoting the view relation/edge.
	ViewColumn = "view_blocks"
	// DatasetTable is the table the holds the dataset relation/edge.
	DatasetTable = "data_sets"
	// DatasetInverseTable is the table name for the DataSet entity.
	// It exists in this package in order to avoid circular dependency with the "dataset" package.
	DatasetInverseTable = "data_sets"
	// DatasetColumn is the table column denoting the dataset relation/edge.
	DatasetColumn = "view_block_dataset"
)

// Columns holds all SQL columns for viewblock fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldConfig,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "view_blocks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"view_blocks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
)
