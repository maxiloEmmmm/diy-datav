// Code generated by entc, DO NOT EDIT.

package view

const (
	// Label holds the string label denoting the view type in the database.
	Label = "view"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// EdgeBg holds the string denoting the bg edge name in mutations.
	EdgeBg = "bg"
	// EdgeBlocks holds the string denoting the blocks edge name in mutations.
	EdgeBlocks = "blocks"
	// EdgeShare holds the string denoting the share edge name in mutations.
	EdgeShare = "share"
	// Table holds the table name of the view in the database.
	Table = "views"
	// BgTable is the table the holds the bg relation/edge.
	BgTable = "views"
	// BgInverseTable is the table name for the Assets entity.
	// It exists in this package in order to avoid circular dependency with the "assets" package.
	BgInverseTable = "assets"
	// BgColumn is the table column denoting the bg relation/edge.
	BgColumn = "assets_view"
	// BlocksTable is the table the holds the blocks relation/edge.
	BlocksTable = "view_blocks"
	// BlocksInverseTable is the table name for the ViewBlock entity.
	// It exists in this package in order to avoid circular dependency with the "viewblock" package.
	BlocksInverseTable = "view_blocks"
	// BlocksColumn is the table column denoting the blocks relation/edge.
	BlocksColumn = "view_blocks"
	// ShareTable is the table the holds the share relation/edge.
	ShareTable = "shares"
	// ShareInverseTable is the table name for the Share entity.
	// It exists in this package in order to avoid circular dependency with the "share" package.
	ShareInverseTable = "shares"
	// ShareColumn is the table column denoting the share relation/edge.
	ShareColumn = "view_share"
)

// Columns holds all SQL columns for view fields.
var Columns = []string{
	FieldID,
	FieldDesc,
	FieldConfig,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "views"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"assets_view",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DescValidator is a validator for the "desc" field. It is called by the builders before save.
	DescValidator func(string) error
)
