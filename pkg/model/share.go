// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/share"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/user"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/view"
)

// Share is the model entity for the Share schema.
type Share struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt time.Time `json:"end_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShareQuery when eager-loading is set.
	Edges      ShareEdges `json:"edges"`
	user_share *int
	view_share *int
}

// ShareEdges holds the relations/edges for other nodes in the graph.
type ShareEdges struct {
	// View holds the value of the view edge.
	View *View `json:"view,omitempty"`
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ViewOrErr returns the View value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShareEdges) ViewOrErr() (*View, error) {
	if e.loadedTypes[0] {
		if e.View == nil {
			// The edge view was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: view.Label}
		}
		return e.View, nil
	}
	return nil, &NotLoadedError{edge: "view"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShareEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Creator == nil {
			// The edge creator was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Share) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case share.FieldID:
			values[i] = new(sql.NullInt64)
		case share.FieldEndAt:
			values[i] = new(sql.NullTime)
		case share.ForeignKeys[0]: // user_share
			values[i] = new(sql.NullInt64)
		case share.ForeignKeys[1]: // view_share
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Share", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Share fields.
func (s *Share) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case share.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case share.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				s.EndAt = value.Time
			}
		case share.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_share", value)
			} else if value.Valid {
				s.user_share = new(int)
				*s.user_share = int(value.Int64)
			}
		case share.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field view_share", value)
			} else if value.Valid {
				s.view_share = new(int)
				*s.view_share = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryView queries the "view" edge of the Share entity.
func (s *Share) QueryView() *ViewQuery {
	return (&ShareClient{config: s.config}).QueryView(s)
}

// QueryCreator queries the "creator" edge of the Share entity.
func (s *Share) QueryCreator() *UserQuery {
	return (&ShareClient{config: s.config}).QueryCreator(s)
}

// Update returns a builder for updating this Share.
// Note that you need to call Share.Unwrap() before calling this method if this Share
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Share) Update() *ShareUpdateOne {
	return (&ShareClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Share entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Share) Unwrap() *Share {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("model: Share is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Share) String() string {
	var builder strings.Builder
	builder.WriteString("Share(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", end_at=")
	builder.WriteString(s.EndAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Shares is a parsable slice of Share.
type Shares []*Share

func (s Shares) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
