// Code generated by entc, DO NOT EDIT.

package dataset

const (
	// Label holds the string label denoting the dataset type in the database.
	Label = "data_set"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// EdgeBlock holds the string denoting the block edge name in mutations.
	EdgeBlock = "block"
	// Table holds the table name of the dataset in the database.
	Table = "data_sets"
	// BlockTable is the table the holds the block relation/edge.
	BlockTable = "data_sets"
	// BlockInverseTable is the table name for the ViewBlock entity.
	// It exists in this package in order to avoid circular dependency with the "viewblock" package.
	BlockInverseTable = "view_blocks"
	// BlockColumn is the table column denoting the block relation/edge.
	BlockColumn = "view_block_dataset"
)

// Columns holds all SQL columns for dataset fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldTitle,
	FieldConfig,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "data_sets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"view_block_dataset",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
)
