// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/assets"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/view"
)

// View is the model entity for the View schema.
type View struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Config holds the value of the "config" field.
	Config string `json:"config,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ViewQuery when eager-loading is set.
	Edges       ViewEdges `json:"edges"`
	assets_view *int
}

// ViewEdges holds the relations/edges for other nodes in the graph.
type ViewEdges struct {
	// Bg holds the value of the bg edge.
	Bg *Assets `json:"bg,omitempty"`
	// Blocks holds the value of the blocks edge.
	Blocks []*ViewBlock `json:"blocks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BgOrErr returns the Bg value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ViewEdges) BgOrErr() (*Assets, error) {
	if e.loadedTypes[0] {
		if e.Bg == nil {
			// The edge bg was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: assets.Label}
		}
		return e.Bg, nil
	}
	return nil, &NotLoadedError{edge: "bg"}
}

// BlocksOrErr returns the Blocks value or an error if the edge
// was not loaded in eager-loading.
func (e ViewEdges) BlocksOrErr() ([]*ViewBlock, error) {
	if e.loadedTypes[1] {
		return e.Blocks, nil
	}
	return nil, &NotLoadedError{edge: "blocks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*View) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case view.FieldID:
			values[i] = new(sql.NullInt64)
		case view.FieldDesc, view.FieldConfig:
			values[i] = new(sql.NullString)
		case view.ForeignKeys[0]: // assets_view
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type View", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the View fields.
func (v *View) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case view.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case view.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				v.Desc = value.String
			}
		case view.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				v.Config = value.String
			}
		case view.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field assets_view", value)
			} else if value.Valid {
				v.assets_view = new(int)
				*v.assets_view = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryBg queries the "bg" edge of the View entity.
func (v *View) QueryBg() *AssetsQuery {
	return (&ViewClient{config: v.config}).QueryBg(v)
}

// QueryBlocks queries the "blocks" edge of the View entity.
func (v *View) QueryBlocks() *ViewBlockQuery {
	return (&ViewClient{config: v.config}).QueryBlocks(v)
}

// Update returns a builder for updating this View.
// Note that you need to call View.Unwrap() before calling this method if this View
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *View) Update() *ViewUpdateOne {
	return (&ViewClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the View entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *View) Unwrap() *View {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("model: View is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *View) String() string {
	var builder strings.Builder
	builder.WriteString("View(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", desc=")
	builder.WriteString(v.Desc)
	builder.WriteString(", config=")
	builder.WriteString(v.Config)
	builder.WriteByte(')')
	return builder.String()
}

// Views is a parsable slice of View.
type Views []*View

func (v Views) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
