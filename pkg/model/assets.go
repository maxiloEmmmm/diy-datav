// Code generated by entc, DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/assets"
)

// Assets is the model entity for the Assets schema.
type Assets struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Ext holds the value of the "ext" field.
	Ext string `json:"ext,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetsQuery when eager-loading is set.
	Edges AssetsEdges `json:"edges"`
}

// AssetsEdges holds the relations/edges for other nodes in the graph.
type AssetsEdges struct {
	// View holds the value of the view edge.
	View []*View `json:"view,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ViewOrErr returns the View value or an error if the edge
// was not loaded in eager-loading.
func (e AssetsEdges) ViewOrErr() ([]*View, error) {
	if e.loadedTypes[0] {
		return e.View, nil
	}
	return nil, &NotLoadedError{edge: "view"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Assets) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case assets.FieldID:
			values[i] = new(sql.NullInt64)
		case assets.FieldPath, assets.FieldExt, assets.FieldType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Assets", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Assets fields.
func (a *Assets) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assets.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case assets.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				a.Path = value.String
			}
		case assets.FieldExt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext", values[i])
			} else if value.Valid {
				a.Ext = value.String
			}
		case assets.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = value.String
			}
		}
	}
	return nil
}

// QueryView queries the "view" edge of the Assets entity.
func (a *Assets) QueryView() *ViewQuery {
	return (&AssetsClient{config: a.config}).QueryView(a)
}

// Update returns a builder for updating this Assets.
// Note that you need to call Assets.Unwrap() before calling this method if this Assets
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Assets) Update() *AssetsUpdateOne {
	return (&AssetsClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Assets entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Assets) Unwrap() *Assets {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("model: Assets is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Assets) String() string {
	var builder strings.Builder
	builder.WriteString("Assets(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", path=")
	builder.WriteString(a.Path)
	builder.WriteString(", ext=")
	builder.WriteString(a.Ext)
	builder.WriteString(", type=")
	builder.WriteString(a.Type)
	builder.WriteByte(')')
	return builder.String()
}

// AssetsSlice is a parsable slice of Assets.
type AssetsSlice []*Assets

func (a AssetsSlice) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
