// Code generated by entc, DO NOT EDIT.

package share

const (
	// Label holds the string label denoting the share type in the database.
	Label = "share"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// EdgeView holds the string denoting the view edge name in mutations.
	EdgeView = "view"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// Table holds the table name of the share in the database.
	Table = "shares"
	// ViewTable is the table the holds the view relation/edge.
	ViewTable = "shares"
	// ViewInverseTable is the table name for the View entity.
	// It exists in this package in order to avoid circular dependency with the "view" package.
	ViewInverseTable = "views"
	// ViewColumn is the table column denoting the view relation/edge.
	ViewColumn = "view_share"
	// CreatorTable is the table the holds the creator relation/edge.
	CreatorTable = "shares"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "user_share"
)

// Columns holds all SQL columns for share fields.
var Columns = []string{
	FieldID,
	FieldEndAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "shares"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_share",
	"view_share",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
