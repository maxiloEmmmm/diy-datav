// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/dataset"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/predicate"
)

// DataSetUpdate is the builder for updating DataSet entities.
type DataSetUpdate struct {
	config
	hooks    []Hook
	mutation *DataSetMutation
}

// Where adds a new predicate for the DataSetUpdate builder.
func (dsu *DataSetUpdate) Where(ps ...predicate.DataSet) *DataSetUpdate {
	dsu.mutation.predicates = append(dsu.mutation.predicates, ps...)
	return dsu
}

// SetType sets the "type" field.
func (dsu *DataSetUpdate) SetType(s string) *DataSetUpdate {
	dsu.mutation.SetType(s)
	return dsu
}

// SetConfig sets the "config" field.
func (dsu *DataSetUpdate) SetConfig(s string) *DataSetUpdate {
	dsu.mutation.SetConfig(s)
	return dsu
}

// Mutation returns the DataSetMutation object of the builder.
func (dsu *DataSetUpdate) Mutation() *DataSetMutation {
	return dsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dsu *DataSetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dsu.hooks) == 0 {
		if err = dsu.check(); err != nil {
			return 0, err
		}
		affected, err = dsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataSetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsu.check(); err != nil {
				return 0, err
			}
			dsu.mutation = mutation
			affected, err = dsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dsu.hooks) - 1; i >= 0; i-- {
			mut = dsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dsu *DataSetUpdate) SaveX(ctx context.Context) int {
	affected, err := dsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dsu *DataSetUpdate) Exec(ctx context.Context) error {
	_, err := dsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsu *DataSetUpdate) ExecX(ctx context.Context) {
	if err := dsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsu *DataSetUpdate) check() error {
	if v, ok := dsu.mutation.GetType(); ok {
		if err := dataset.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("model: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (dsu *DataSetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dataset.Table,
			Columns: dataset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dataset.FieldID,
			},
		},
	}
	if ps := dsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dataset.FieldType,
		})
	}
	if value, ok := dsu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dataset.FieldConfig,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dataset.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DataSetUpdateOne is the builder for updating a single DataSet entity.
type DataSetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DataSetMutation
}

// SetType sets the "type" field.
func (dsuo *DataSetUpdateOne) SetType(s string) *DataSetUpdateOne {
	dsuo.mutation.SetType(s)
	return dsuo
}

// SetConfig sets the "config" field.
func (dsuo *DataSetUpdateOne) SetConfig(s string) *DataSetUpdateOne {
	dsuo.mutation.SetConfig(s)
	return dsuo
}

// Mutation returns the DataSetMutation object of the builder.
func (dsuo *DataSetUpdateOne) Mutation() *DataSetMutation {
	return dsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dsuo *DataSetUpdateOne) Select(field string, fields ...string) *DataSetUpdateOne {
	dsuo.fields = append([]string{field}, fields...)
	return dsuo
}

// Save executes the query and returns the updated DataSet entity.
func (dsuo *DataSetUpdateOne) Save(ctx context.Context) (*DataSet, error) {
	var (
		err  error
		node *DataSet
	)
	if len(dsuo.hooks) == 0 {
		if err = dsuo.check(); err != nil {
			return nil, err
		}
		node, err = dsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataSetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsuo.check(); err != nil {
				return nil, err
			}
			dsuo.mutation = mutation
			node, err = dsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dsuo.hooks) - 1; i >= 0; i-- {
			mut = dsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dsuo *DataSetUpdateOne) SaveX(ctx context.Context) *DataSet {
	node, err := dsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dsuo *DataSetUpdateOne) Exec(ctx context.Context) error {
	_, err := dsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsuo *DataSetUpdateOne) ExecX(ctx context.Context) {
	if err := dsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsuo *DataSetUpdateOne) check() error {
	if v, ok := dsuo.mutation.GetType(); ok {
		if err := dataset.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("model: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (dsuo *DataSetUpdateOne) sqlSave(ctx context.Context) (_node *DataSet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dataset.Table,
			Columns: dataset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dataset.FieldID,
			},
		},
	}
	id, ok := dsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DataSet.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := dsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dataset.FieldID)
		for _, f := range fields {
			if !dataset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != dataset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dataset.FieldType,
		})
	}
	if value, ok := dsuo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dataset.FieldConfig,
		})
	}
	_node = &DataSet{config: dsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dataset.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
