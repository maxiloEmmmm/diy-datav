// Code generated by entc, DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/maxiloEmmmm/diy-datav/pkg/model/assets"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/dataset"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/menu"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/predicate"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/share"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/typeconfig"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/user"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/view"
	"github.com/maxiloEmmmm/diy-datav/pkg/model/viewblock"
	contact "github.com/maxiloEmmmm/go-web/contact"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAssets     = "Assets"
	TypeDataSet    = "DataSet"
	TypeMenu       = "Menu"
	TypeShare      = "Share"
	TypeTypeConfig = "TypeConfig"
	TypeUser       = "User"
	TypeView       = "View"
	TypeViewBlock  = "ViewBlock"
)

// AssetsMutation represents an operation that mutates the Assets nodes in the graph.
type AssetsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_path         *string
	ext           *string
	_type         *string
	clearedFields map[string]struct{}
	view          map[int]struct{}
	removedview   map[int]struct{}
	clearedview   bool
	done          bool
	oldValue      func(context.Context) (*Assets, error)
	predicates    []predicate.Assets
}

var _ ent.Mutation = (*AssetsMutation)(nil)

// assetsOption allows management of the mutation configuration using functional options.
type assetsOption func(*AssetsMutation)

// newAssetsMutation creates new mutation for the Assets entity.
func newAssetsMutation(c config, op Op, opts ...assetsOption) *AssetsMutation {
	m := &AssetsMutation{
		config:        c,
		op:            op,
		typ:           TypeAssets,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAssetsID sets the ID field of the mutation.
func withAssetsID(id int) assetsOption {
	return func(m *AssetsMutation) {
		var (
			err   error
			once  sync.Once
			value *Assets
		)
		m.oldValue = func(ctx context.Context) (*Assets, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Assets.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAssets sets the old Assets of the mutation.
func withAssets(node *Assets) assetsOption {
	return func(m *AssetsMutation) {
		m.oldValue = func(context.Context) (*Assets, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AssetsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AssetsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *AssetsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPath sets the "path" field.
func (m *AssetsMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *AssetsMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Assets entity.
// If the Assets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetsMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *AssetsMutation) ResetPath() {
	m._path = nil
}

// SetExt sets the "ext" field.
func (m *AssetsMutation) SetExt(s string) {
	m.ext = &s
}

// Ext returns the value of the "ext" field in the mutation.
func (m *AssetsMutation) Ext() (r string, exists bool) {
	v := m.ext
	if v == nil {
		return
	}
	return *v, true
}

// OldExt returns the old "ext" field's value of the Assets entity.
// If the Assets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetsMutation) OldExt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExt: %w", err)
	}
	return oldValue.Ext, nil
}

// ResetExt resets all changes to the "ext" field.
func (m *AssetsMutation) ResetExt() {
	m.ext = nil
}

// SetType sets the "type" field.
func (m *AssetsMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *AssetsMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Assets entity.
// If the Assets object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AssetsMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *AssetsMutation) ResetType() {
	m._type = nil
}

// AddViewIDs adds the "view" edge to the View entity by ids.
func (m *AssetsMutation) AddViewIDs(ids ...int) {
	if m.view == nil {
		m.view = make(map[int]struct{})
	}
	for i := range ids {
		m.view[ids[i]] = struct{}{}
	}
}

// ClearView clears the "view" edge to the View entity.
func (m *AssetsMutation) ClearView() {
	m.clearedview = true
}

// ViewCleared reports if the "view" edge to the View entity was cleared.
func (m *AssetsMutation) ViewCleared() bool {
	return m.clearedview
}

// RemoveViewIDs removes the "view" edge to the View entity by IDs.
func (m *AssetsMutation) RemoveViewIDs(ids ...int) {
	if m.removedview == nil {
		m.removedview = make(map[int]struct{})
	}
	for i := range ids {
		m.removedview[ids[i]] = struct{}{}
	}
}

// RemovedView returns the removed IDs of the "view" edge to the View entity.
func (m *AssetsMutation) RemovedViewIDs() (ids []int) {
	for id := range m.removedview {
		ids = append(ids, id)
	}
	return
}

// ViewIDs returns the "view" edge IDs in the mutation.
func (m *AssetsMutation) ViewIDs() (ids []int) {
	for id := range m.view {
		ids = append(ids, id)
	}
	return
}

// ResetView resets all changes to the "view" edge.
func (m *AssetsMutation) ResetView() {
	m.view = nil
	m.clearedview = false
	m.removedview = nil
}

// Op returns the operation name.
func (m *AssetsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Assets).
func (m *AssetsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AssetsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._path != nil {
		fields = append(fields, assets.FieldPath)
	}
	if m.ext != nil {
		fields = append(fields, assets.FieldExt)
	}
	if m._type != nil {
		fields = append(fields, assets.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AssetsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case assets.FieldPath:
		return m.Path()
	case assets.FieldExt:
		return m.Ext()
	case assets.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AssetsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case assets.FieldPath:
		return m.OldPath(ctx)
	case assets.FieldExt:
		return m.OldExt(ctx)
	case assets.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Assets field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AssetsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case assets.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case assets.FieldExt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExt(v)
		return nil
	case assets.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Assets field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AssetsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AssetsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AssetsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Assets numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AssetsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AssetsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AssetsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Assets nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AssetsMutation) ResetField(name string) error {
	switch name {
	case assets.FieldPath:
		m.ResetPath()
		return nil
	case assets.FieldExt:
		m.ResetExt()
		return nil
	case assets.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Assets field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AssetsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.view != nil {
		edges = append(edges, assets.EdgeView)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AssetsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case assets.EdgeView:
		ids := make([]ent.Value, 0, len(m.view))
		for id := range m.view {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AssetsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedview != nil {
		edges = append(edges, assets.EdgeView)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AssetsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case assets.EdgeView:
		ids := make([]ent.Value, 0, len(m.removedview))
		for id := range m.removedview {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AssetsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedview {
		edges = append(edges, assets.EdgeView)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AssetsMutation) EdgeCleared(name string) bool {
	switch name {
	case assets.EdgeView:
		return m.clearedview
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AssetsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Assets unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AssetsMutation) ResetEdge(name string) error {
	switch name {
	case assets.EdgeView:
		m.ResetView()
		return nil
	}
	return fmt.Errorf("unknown Assets edge %s", name)
}

// DataSetMutation represents an operation that mutates the DataSet nodes in the graph.
type DataSetMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_type         *string
	title         *string
	_config       *string
	clearedFields map[string]struct{}
	block         *int
	clearedblock  bool
	done          bool
	oldValue      func(context.Context) (*DataSet, error)
	predicates    []predicate.DataSet
}

var _ ent.Mutation = (*DataSetMutation)(nil)

// datasetOption allows management of the mutation configuration using functional options.
type datasetOption func(*DataSetMutation)

// newDataSetMutation creates new mutation for the DataSet entity.
func newDataSetMutation(c config, op Op, opts ...datasetOption) *DataSetMutation {
	m := &DataSetMutation{
		config:        c,
		op:            op,
		typ:           TypeDataSet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDataSetID sets the ID field of the mutation.
func withDataSetID(id int) datasetOption {
	return func(m *DataSetMutation) {
		var (
			err   error
			once  sync.Once
			value *DataSet
		)
		m.oldValue = func(ctx context.Context) (*DataSet, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DataSet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDataSet sets the old DataSet of the mutation.
func withDataSet(node *DataSet) datasetOption {
	return func(m *DataSetMutation) {
		m.oldValue = func(context.Context) (*DataSet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DataSetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DataSetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *DataSetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetType sets the "type" field.
func (m *DataSetMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *DataSetMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the DataSet entity.
// If the DataSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataSetMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *DataSetMutation) ResetType() {
	m._type = nil
}

// SetTitle sets the "title" field.
func (m *DataSetMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *DataSetMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the DataSet entity.
// If the DataSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataSetMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *DataSetMutation) ResetTitle() {
	m.title = nil
}

// SetConfig sets the "config" field.
func (m *DataSetMutation) SetConfig(s string) {
	m._config = &s
}

// Config returns the value of the "config" field in the mutation.
func (m *DataSetMutation) Config() (r string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the DataSet entity.
// If the DataSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataSetMutation) OldConfig(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *DataSetMutation) ResetConfig() {
	m._config = nil
}

// SetBlockID sets the "block" edge to the ViewBlock entity by id.
func (m *DataSetMutation) SetBlockID(id int) {
	m.block = &id
}

// ClearBlock clears the "block" edge to the ViewBlock entity.
func (m *DataSetMutation) ClearBlock() {
	m.clearedblock = true
}

// BlockCleared reports if the "block" edge to the ViewBlock entity was cleared.
func (m *DataSetMutation) BlockCleared() bool {
	return m.clearedblock
}

// BlockID returns the "block" edge ID in the mutation.
func (m *DataSetMutation) BlockID() (id int, exists bool) {
	if m.block != nil {
		return *m.block, true
	}
	return
}

// BlockIDs returns the "block" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BlockID instead. It exists only for internal usage by the builders.
func (m *DataSetMutation) BlockIDs() (ids []int) {
	if id := m.block; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBlock resets all changes to the "block" edge.
func (m *DataSetMutation) ResetBlock() {
	m.block = nil
	m.clearedblock = false
}

// Op returns the operation name.
func (m *DataSetMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DataSet).
func (m *DataSetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DataSetMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._type != nil {
		fields = append(fields, dataset.FieldType)
	}
	if m.title != nil {
		fields = append(fields, dataset.FieldTitle)
	}
	if m._config != nil {
		fields = append(fields, dataset.FieldConfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DataSetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dataset.FieldType:
		return m.GetType()
	case dataset.FieldTitle:
		return m.Title()
	case dataset.FieldConfig:
		return m.Config()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DataSetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dataset.FieldType:
		return m.OldType(ctx)
	case dataset.FieldTitle:
		return m.OldTitle(ctx)
	case dataset.FieldConfig:
		return m.OldConfig(ctx)
	}
	return nil, fmt.Errorf("unknown DataSet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DataSetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dataset.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case dataset.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case dataset.FieldConfig:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	}
	return fmt.Errorf("unknown DataSet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DataSetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DataSetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DataSetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DataSet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DataSetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DataSetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DataSetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DataSet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DataSetMutation) ResetField(name string) error {
	switch name {
	case dataset.FieldType:
		m.ResetType()
		return nil
	case dataset.FieldTitle:
		m.ResetTitle()
		return nil
	case dataset.FieldConfig:
		m.ResetConfig()
		return nil
	}
	return fmt.Errorf("unknown DataSet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DataSetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.block != nil {
		edges = append(edges, dataset.EdgeBlock)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DataSetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dataset.EdgeBlock:
		if id := m.block; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DataSetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DataSetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DataSetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedblock {
		edges = append(edges, dataset.EdgeBlock)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DataSetMutation) EdgeCleared(name string) bool {
	switch name {
	case dataset.EdgeBlock:
		return m.clearedblock
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DataSetMutation) ClearEdge(name string) error {
	switch name {
	case dataset.EdgeBlock:
		m.ClearBlock()
		return nil
	}
	return fmt.Errorf("unknown DataSet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DataSetMutation) ResetEdge(name string) error {
	switch name {
	case dataset.EdgeBlock:
		m.ResetBlock()
		return nil
	}
	return fmt.Errorf("unknown DataSet edge %s", name)
}

// MenuMutation represents an operation that mutates the Menu nodes in the graph.
type MenuMutation struct {
	config
	op              Op
	typ             string
	id              *int
	title           *string
	url             *string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	parent          *int
	clearedparent   bool
	children        map[int]struct{}
	removedchildren map[int]struct{}
	clearedchildren bool
	done            bool
	oldValue        func(context.Context) (*Menu, error)
	predicates      []predicate.Menu
}

var _ ent.Mutation = (*MenuMutation)(nil)

// menuOption allows management of the mutation configuration using functional options.
type menuOption func(*MenuMutation)

// newMenuMutation creates new mutation for the Menu entity.
func newMenuMutation(c config, op Op, opts ...menuOption) *MenuMutation {
	m := &MenuMutation{
		config:        c,
		op:            op,
		typ:           TypeMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMenuID sets the ID field of the mutation.
func withMenuID(id int) menuOption {
	return func(m *MenuMutation) {
		var (
			err   error
			once  sync.Once
			value *Menu
		)
		m.oldValue = func(ctx context.Context) (*Menu, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Menu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMenu sets the old Menu of the mutation.
func withMenu(node *Menu) menuOption {
	return func(m *MenuMutation) {
		m.oldValue = func(context.Context) (*Menu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *MenuMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the "title" field.
func (m *MenuMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MenuMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *MenuMutation) ResetTitle() {
	m.title = nil
}

// SetURL sets the "url" field.
func (m *MenuMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *MenuMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *MenuMutation) ResetURL() {
	m.url = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MenuMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MenuMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MenuMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MenuMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MenuMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Menu entity.
// If the Menu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MenuMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MenuMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetParentID sets the "parent" edge to the Menu entity by id.
func (m *MenuMutation) SetParentID(id int) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Menu entity.
func (m *MenuMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Menu entity was cleared.
func (m *MenuMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *MenuMutation) ParentID() (id int, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *MenuMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *MenuMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Menu entity by ids.
func (m *MenuMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Menu entity.
func (m *MenuMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Menu entity was cleared.
func (m *MenuMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Menu entity by IDs.
func (m *MenuMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Menu entity.
func (m *MenuMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *MenuMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *MenuMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Op returns the operation name.
func (m *MenuMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Menu).
func (m *MenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MenuMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.title != nil {
		fields = append(fields, menu.FieldTitle)
	}
	if m.url != nil {
		fields = append(fields, menu.FieldURL)
	}
	if m.created_at != nil {
		fields = append(fields, menu.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, menu.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case menu.FieldTitle:
		return m.Title()
	case menu.FieldURL:
		return m.URL()
	case menu.FieldCreatedAt:
		return m.CreatedAt()
	case menu.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case menu.FieldTitle:
		return m.OldTitle(ctx)
	case menu.FieldURL:
		return m.OldURL(ctx)
	case menu.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case menu.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Menu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case menu.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case menu.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case menu.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case menu.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Menu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MenuMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MenuMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Menu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MenuMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MenuMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Menu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MenuMutation) ResetField(name string) error {
	switch name {
	case menu.FieldTitle:
		m.ResetTitle()
		return nil
	case menu.FieldURL:
		m.ResetURL()
		return nil
	case menu.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case menu.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Menu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, menu.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, menu.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MenuMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case menu.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case menu.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, menu.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MenuMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case menu.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, menu.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, menu.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MenuMutation) EdgeCleared(name string) bool {
	switch name {
	case menu.EdgeParent:
		return m.clearedparent
	case menu.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MenuMutation) ClearEdge(name string) error {
	switch name {
	case menu.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Menu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MenuMutation) ResetEdge(name string) error {
	switch name {
	case menu.EdgeParent:
		m.ResetParent()
		return nil
	case menu.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Menu edge %s", name)
}

// ShareMutation represents an operation that mutates the Share nodes in the graph.
type ShareMutation struct {
	config
	op             Op
	typ            string
	id             *int
	end_at         *time.Time
	clearedFields  map[string]struct{}
	view           *int
	clearedview    bool
	creator        *int
	clearedcreator bool
	done           bool
	oldValue       func(context.Context) (*Share, error)
	predicates     []predicate.Share
}

var _ ent.Mutation = (*ShareMutation)(nil)

// shareOption allows management of the mutation configuration using functional options.
type shareOption func(*ShareMutation)

// newShareMutation creates new mutation for the Share entity.
func newShareMutation(c config, op Op, opts ...shareOption) *ShareMutation {
	m := &ShareMutation{
		config:        c,
		op:            op,
		typ:           TypeShare,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShareID sets the ID field of the mutation.
func withShareID(id int) shareOption {
	return func(m *ShareMutation) {
		var (
			err   error
			once  sync.Once
			value *Share
		)
		m.oldValue = func(ctx context.Context) (*Share, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Share.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShare sets the old Share of the mutation.
func withShare(node *Share) shareOption {
	return func(m *ShareMutation) {
		m.oldValue = func(context.Context) (*Share, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShareMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShareMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ShareMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEndAt sets the "end_at" field.
func (m *ShareMutation) SetEndAt(t time.Time) {
	m.end_at = &t
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *ShareMutation) EndAt() (r time.Time, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the Share entity.
// If the Share object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShareMutation) OldEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *ShareMutation) ResetEndAt() {
	m.end_at = nil
}

// SetViewID sets the "view" edge to the View entity by id.
func (m *ShareMutation) SetViewID(id int) {
	m.view = &id
}

// ClearView clears the "view" edge to the View entity.
func (m *ShareMutation) ClearView() {
	m.clearedview = true
}

// ViewCleared reports if the "view" edge to the View entity was cleared.
func (m *ShareMutation) ViewCleared() bool {
	return m.clearedview
}

// ViewID returns the "view" edge ID in the mutation.
func (m *ShareMutation) ViewID() (id int, exists bool) {
	if m.view != nil {
		return *m.view, true
	}
	return
}

// ViewIDs returns the "view" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ViewID instead. It exists only for internal usage by the builders.
func (m *ShareMutation) ViewIDs() (ids []int) {
	if id := m.view; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetView resets all changes to the "view" edge.
func (m *ShareMutation) ResetView() {
	m.view = nil
	m.clearedview = false
}

// SetCreatorID sets the "creator" edge to the User entity by id.
func (m *ShareMutation) SetCreatorID(id int) {
	m.creator = &id
}

// ClearCreator clears the "creator" edge to the User entity.
func (m *ShareMutation) ClearCreator() {
	m.clearedcreator = true
}

// CreatorCleared reports if the "creator" edge to the User entity was cleared.
func (m *ShareMutation) CreatorCleared() bool {
	return m.clearedcreator
}

// CreatorID returns the "creator" edge ID in the mutation.
func (m *ShareMutation) CreatorID() (id int, exists bool) {
	if m.creator != nil {
		return *m.creator, true
	}
	return
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *ShareMutation) CreatorIDs() (ids []int) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *ShareMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// Op returns the operation name.
func (m *ShareMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Share).
func (m *ShareMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShareMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.end_at != nil {
		fields = append(fields, share.FieldEndAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShareMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case share.FieldEndAt:
		return m.EndAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShareMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case share.FieldEndAt:
		return m.OldEndAt(ctx)
	}
	return nil, fmt.Errorf("unknown Share field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShareMutation) SetField(name string, value ent.Value) error {
	switch name {
	case share.FieldEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown Share field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShareMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShareMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShareMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Share numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShareMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShareMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShareMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Share nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShareMutation) ResetField(name string) error {
	switch name {
	case share.FieldEndAt:
		m.ResetEndAt()
		return nil
	}
	return fmt.Errorf("unknown Share field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShareMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.view != nil {
		edges = append(edges, share.EdgeView)
	}
	if m.creator != nil {
		edges = append(edges, share.EdgeCreator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShareMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case share.EdgeView:
		if id := m.view; id != nil {
			return []ent.Value{*id}
		}
	case share.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShareMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShareMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShareMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedview {
		edges = append(edges, share.EdgeView)
	}
	if m.clearedcreator {
		edges = append(edges, share.EdgeCreator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShareMutation) EdgeCleared(name string) bool {
	switch name {
	case share.EdgeView:
		return m.clearedview
	case share.EdgeCreator:
		return m.clearedcreator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShareMutation) ClearEdge(name string) error {
	switch name {
	case share.EdgeView:
		m.ClearView()
		return nil
	case share.EdgeCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown Share unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShareMutation) ResetEdge(name string) error {
	switch name {
	case share.EdgeView:
		m.ResetView()
		return nil
	case share.EdgeCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown Share edge %s", name)
}

// TypeConfigMutation represents an operation that mutates the TypeConfig nodes in the graph.
type TypeConfigMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_type         *string
	title         *string
	_config       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TypeConfig, error)
	predicates    []predicate.TypeConfig
}

var _ ent.Mutation = (*TypeConfigMutation)(nil)

// typeconfigOption allows management of the mutation configuration using functional options.
type typeconfigOption func(*TypeConfigMutation)

// newTypeConfigMutation creates new mutation for the TypeConfig entity.
func newTypeConfigMutation(c config, op Op, opts ...typeconfigOption) *TypeConfigMutation {
	m := &TypeConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeTypeConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTypeConfigID sets the ID field of the mutation.
func withTypeConfigID(id int) typeconfigOption {
	return func(m *TypeConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *TypeConfig
		)
		m.oldValue = func(ctx context.Context) (*TypeConfig, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TypeConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTypeConfig sets the old TypeConfig of the mutation.
func withTypeConfig(node *TypeConfig) typeconfigOption {
	return func(m *TypeConfigMutation) {
		m.oldValue = func(context.Context) (*TypeConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TypeConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TypeConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TypeConfig entities.
func (m *TypeConfigMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *TypeConfigMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetType sets the "type" field.
func (m *TypeConfigMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *TypeConfigMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the TypeConfig entity.
// If the TypeConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TypeConfigMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TypeConfigMutation) ResetType() {
	m._type = nil
}

// SetTitle sets the "title" field.
func (m *TypeConfigMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TypeConfigMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the TypeConfig entity.
// If the TypeConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TypeConfigMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TypeConfigMutation) ResetTitle() {
	m.title = nil
}

// SetConfig sets the "config" field.
func (m *TypeConfigMutation) SetConfig(s string) {
	m._config = &s
}

// Config returns the value of the "config" field in the mutation.
func (m *TypeConfigMutation) Config() (r string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the TypeConfig entity.
// If the TypeConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TypeConfigMutation) OldConfig(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *TypeConfigMutation) ResetConfig() {
	m._config = nil
}

// Op returns the operation name.
func (m *TypeConfigMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TypeConfig).
func (m *TypeConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TypeConfigMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._type != nil {
		fields = append(fields, typeconfig.FieldType)
	}
	if m.title != nil {
		fields = append(fields, typeconfig.FieldTitle)
	}
	if m._config != nil {
		fields = append(fields, typeconfig.FieldConfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TypeConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case typeconfig.FieldType:
		return m.GetType()
	case typeconfig.FieldTitle:
		return m.Title()
	case typeconfig.FieldConfig:
		return m.Config()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TypeConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case typeconfig.FieldType:
		return m.OldType(ctx)
	case typeconfig.FieldTitle:
		return m.OldTitle(ctx)
	case typeconfig.FieldConfig:
		return m.OldConfig(ctx)
	}
	return nil, fmt.Errorf("unknown TypeConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TypeConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case typeconfig.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case typeconfig.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case typeconfig.FieldConfig:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	}
	return fmt.Errorf("unknown TypeConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TypeConfigMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TypeConfigMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TypeConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TypeConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TypeConfigMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TypeConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TypeConfigMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TypeConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TypeConfigMutation) ResetField(name string) error {
	switch name {
	case typeconfig.FieldType:
		m.ResetType()
		return nil
	case typeconfig.FieldTitle:
		m.ResetTitle()
		return nil
	case typeconfig.FieldConfig:
		m.ResetConfig()
		return nil
	}
	return fmt.Errorf("unknown TypeConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TypeConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TypeConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TypeConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TypeConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TypeConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TypeConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TypeConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TypeConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TypeConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TypeConfig edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	password      *string
	enable        **contact.BoolField
	clearedFields map[string]struct{}
	share         map[int]struct{}
	removedshare  map[int]struct{}
	clearedshare  bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetEnable sets the "enable" field.
func (m *UserMutation) SetEnable(cf *contact.BoolField) {
	m.enable = &cf
}

// Enable returns the value of the "enable" field in the mutation.
func (m *UserMutation) Enable() (r *contact.BoolField, exists bool) {
	v := m.enable
	if v == nil {
		return
	}
	return *v, true
}

// OldEnable returns the old "enable" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEnable(ctx context.Context) (v *contact.BoolField, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnable: %w", err)
	}
	return oldValue.Enable, nil
}

// ResetEnable resets all changes to the "enable" field.
func (m *UserMutation) ResetEnable() {
	m.enable = nil
}

// AddShareIDs adds the "share" edge to the Share entity by ids.
func (m *UserMutation) AddShareIDs(ids ...int) {
	if m.share == nil {
		m.share = make(map[int]struct{})
	}
	for i := range ids {
		m.share[ids[i]] = struct{}{}
	}
}

// ClearShare clears the "share" edge to the Share entity.
func (m *UserMutation) ClearShare() {
	m.clearedshare = true
}

// ShareCleared reports if the "share" edge to the Share entity was cleared.
func (m *UserMutation) ShareCleared() bool {
	return m.clearedshare
}

// RemoveShareIDs removes the "share" edge to the Share entity by IDs.
func (m *UserMutation) RemoveShareIDs(ids ...int) {
	if m.removedshare == nil {
		m.removedshare = make(map[int]struct{})
	}
	for i := range ids {
		m.removedshare[ids[i]] = struct{}{}
	}
}

// RemovedShare returns the removed IDs of the "share" edge to the Share entity.
func (m *UserMutation) RemovedShareIDs() (ids []int) {
	for id := range m.removedshare {
		ids = append(ids, id)
	}
	return
}

// ShareIDs returns the "share" edge IDs in the mutation.
func (m *UserMutation) ShareIDs() (ids []int) {
	for id := range m.share {
		ids = append(ids, id)
	}
	return
}

// ResetShare resets all changes to the "share" edge.
func (m *UserMutation) ResetShare() {
	m.share = nil
	m.clearedshare = false
	m.removedshare = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.enable != nil {
		fields = append(fields, user.FieldEnable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldEnable:
		return m.Enable()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEnable:
		return m.OldEnable(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEnable:
		v, ok := value.(*contact.BoolField)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnable(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEnable:
		m.ResetEnable()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.share != nil {
		edges = append(edges, user.EdgeShare)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeShare:
		ids := make([]ent.Value, 0, len(m.share))
		for id := range m.share {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedshare != nil {
		edges = append(edges, user.EdgeShare)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeShare:
		ids := make([]ent.Value, 0, len(m.removedshare))
		for id := range m.removedshare {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedshare {
		edges = append(edges, user.EdgeShare)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeShare:
		return m.clearedshare
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeShare:
		m.ResetShare()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// ViewMutation represents an operation that mutates the View nodes in the graph.
type ViewMutation struct {
	config
	op            Op
	typ           string
	id            *int
	desc          *string
	_config       *string
	clearedFields map[string]struct{}
	bg            *int
	clearedbg     bool
	blocks        map[int]struct{}
	removedblocks map[int]struct{}
	clearedblocks bool
	share         map[int]struct{}
	removedshare  map[int]struct{}
	clearedshare  bool
	done          bool
	oldValue      func(context.Context) (*View, error)
	predicates    []predicate.View
}

var _ ent.Mutation = (*ViewMutation)(nil)

// viewOption allows management of the mutation configuration using functional options.
type viewOption func(*ViewMutation)

// newViewMutation creates new mutation for the View entity.
func newViewMutation(c config, op Op, opts ...viewOption) *ViewMutation {
	m := &ViewMutation{
		config:        c,
		op:            op,
		typ:           TypeView,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withViewID sets the ID field of the mutation.
func withViewID(id int) viewOption {
	return func(m *ViewMutation) {
		var (
			err   error
			once  sync.Once
			value *View
		)
		m.oldValue = func(ctx context.Context) (*View, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().View.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withView sets the old View of the mutation.
func withView(node *View) viewOption {
	return func(m *ViewMutation) {
		m.oldValue = func(context.Context) (*View, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ViewMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ViewMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ViewMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDesc sets the "desc" field.
func (m *ViewMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *ViewMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the View entity.
// If the View object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ViewMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *ViewMutation) ResetDesc() {
	m.desc = nil
}

// SetConfig sets the "config" field.
func (m *ViewMutation) SetConfig(s string) {
	m._config = &s
}

// Config returns the value of the "config" field in the mutation.
func (m *ViewMutation) Config() (r string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the View entity.
// If the View object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ViewMutation) OldConfig(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *ViewMutation) ResetConfig() {
	m._config = nil
}

// SetBgID sets the "bg" edge to the Assets entity by id.
func (m *ViewMutation) SetBgID(id int) {
	m.bg = &id
}

// ClearBg clears the "bg" edge to the Assets entity.
func (m *ViewMutation) ClearBg() {
	m.clearedbg = true
}

// BgCleared reports if the "bg" edge to the Assets entity was cleared.
func (m *ViewMutation) BgCleared() bool {
	return m.clearedbg
}

// BgID returns the "bg" edge ID in the mutation.
func (m *ViewMutation) BgID() (id int, exists bool) {
	if m.bg != nil {
		return *m.bg, true
	}
	return
}

// BgIDs returns the "bg" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BgID instead. It exists only for internal usage by the builders.
func (m *ViewMutation) BgIDs() (ids []int) {
	if id := m.bg; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBg resets all changes to the "bg" edge.
func (m *ViewMutation) ResetBg() {
	m.bg = nil
	m.clearedbg = false
}

// AddBlockIDs adds the "blocks" edge to the ViewBlock entity by ids.
func (m *ViewMutation) AddBlockIDs(ids ...int) {
	if m.blocks == nil {
		m.blocks = make(map[int]struct{})
	}
	for i := range ids {
		m.blocks[ids[i]] = struct{}{}
	}
}

// ClearBlocks clears the "blocks" edge to the ViewBlock entity.
func (m *ViewMutation) ClearBlocks() {
	m.clearedblocks = true
}

// BlocksCleared reports if the "blocks" edge to the ViewBlock entity was cleared.
func (m *ViewMutation) BlocksCleared() bool {
	return m.clearedblocks
}

// RemoveBlockIDs removes the "blocks" edge to the ViewBlock entity by IDs.
func (m *ViewMutation) RemoveBlockIDs(ids ...int) {
	if m.removedblocks == nil {
		m.removedblocks = make(map[int]struct{})
	}
	for i := range ids {
		m.removedblocks[ids[i]] = struct{}{}
	}
}

// RemovedBlocks returns the removed IDs of the "blocks" edge to the ViewBlock entity.
func (m *ViewMutation) RemovedBlocksIDs() (ids []int) {
	for id := range m.removedblocks {
		ids = append(ids, id)
	}
	return
}

// BlocksIDs returns the "blocks" edge IDs in the mutation.
func (m *ViewMutation) BlocksIDs() (ids []int) {
	for id := range m.blocks {
		ids = append(ids, id)
	}
	return
}

// ResetBlocks resets all changes to the "blocks" edge.
func (m *ViewMutation) ResetBlocks() {
	m.blocks = nil
	m.clearedblocks = false
	m.removedblocks = nil
}

// AddShareIDs adds the "share" edge to the Share entity by ids.
func (m *ViewMutation) AddShareIDs(ids ...int) {
	if m.share == nil {
		m.share = make(map[int]struct{})
	}
	for i := range ids {
		m.share[ids[i]] = struct{}{}
	}
}

// ClearShare clears the "share" edge to the Share entity.
func (m *ViewMutation) ClearShare() {
	m.clearedshare = true
}

// ShareCleared reports if the "share" edge to the Share entity was cleared.
func (m *ViewMutation) ShareCleared() bool {
	return m.clearedshare
}

// RemoveShareIDs removes the "share" edge to the Share entity by IDs.
func (m *ViewMutation) RemoveShareIDs(ids ...int) {
	if m.removedshare == nil {
		m.removedshare = make(map[int]struct{})
	}
	for i := range ids {
		m.removedshare[ids[i]] = struct{}{}
	}
}

// RemovedShare returns the removed IDs of the "share" edge to the Share entity.
func (m *ViewMutation) RemovedShareIDs() (ids []int) {
	for id := range m.removedshare {
		ids = append(ids, id)
	}
	return
}

// ShareIDs returns the "share" edge IDs in the mutation.
func (m *ViewMutation) ShareIDs() (ids []int) {
	for id := range m.share {
		ids = append(ids, id)
	}
	return
}

// ResetShare resets all changes to the "share" edge.
func (m *ViewMutation) ResetShare() {
	m.share = nil
	m.clearedshare = false
	m.removedshare = nil
}

// Op returns the operation name.
func (m *ViewMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (View).
func (m *ViewMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ViewMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.desc != nil {
		fields = append(fields, view.FieldDesc)
	}
	if m._config != nil {
		fields = append(fields, view.FieldConfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ViewMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case view.FieldDesc:
		return m.Desc()
	case view.FieldConfig:
		return m.Config()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ViewMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case view.FieldDesc:
		return m.OldDesc(ctx)
	case view.FieldConfig:
		return m.OldConfig(ctx)
	}
	return nil, fmt.Errorf("unknown View field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ViewMutation) SetField(name string, value ent.Value) error {
	switch name {
	case view.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case view.FieldConfig:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	}
	return fmt.Errorf("unknown View field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ViewMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ViewMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ViewMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown View numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ViewMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ViewMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ViewMutation) ClearField(name string) error {
	return fmt.Errorf("unknown View nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ViewMutation) ResetField(name string) error {
	switch name {
	case view.FieldDesc:
		m.ResetDesc()
		return nil
	case view.FieldConfig:
		m.ResetConfig()
		return nil
	}
	return fmt.Errorf("unknown View field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ViewMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.bg != nil {
		edges = append(edges, view.EdgeBg)
	}
	if m.blocks != nil {
		edges = append(edges, view.EdgeBlocks)
	}
	if m.share != nil {
		edges = append(edges, view.EdgeShare)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ViewMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case view.EdgeBg:
		if id := m.bg; id != nil {
			return []ent.Value{*id}
		}
	case view.EdgeBlocks:
		ids := make([]ent.Value, 0, len(m.blocks))
		for id := range m.blocks {
			ids = append(ids, id)
		}
		return ids
	case view.EdgeShare:
		ids := make([]ent.Value, 0, len(m.share))
		for id := range m.share {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ViewMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedblocks != nil {
		edges = append(edges, view.EdgeBlocks)
	}
	if m.removedshare != nil {
		edges = append(edges, view.EdgeShare)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ViewMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case view.EdgeBlocks:
		ids := make([]ent.Value, 0, len(m.removedblocks))
		for id := range m.removedblocks {
			ids = append(ids, id)
		}
		return ids
	case view.EdgeShare:
		ids := make([]ent.Value, 0, len(m.removedshare))
		for id := range m.removedshare {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ViewMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedbg {
		edges = append(edges, view.EdgeBg)
	}
	if m.clearedblocks {
		edges = append(edges, view.EdgeBlocks)
	}
	if m.clearedshare {
		edges = append(edges, view.EdgeShare)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ViewMutation) EdgeCleared(name string) bool {
	switch name {
	case view.EdgeBg:
		return m.clearedbg
	case view.EdgeBlocks:
		return m.clearedblocks
	case view.EdgeShare:
		return m.clearedshare
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ViewMutation) ClearEdge(name string) error {
	switch name {
	case view.EdgeBg:
		m.ClearBg()
		return nil
	}
	return fmt.Errorf("unknown View unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ViewMutation) ResetEdge(name string) error {
	switch name {
	case view.EdgeBg:
		m.ResetBg()
		return nil
	case view.EdgeBlocks:
		m.ResetBlocks()
		return nil
	case view.EdgeShare:
		m.ResetShare()
		return nil
	}
	return fmt.Errorf("unknown View edge %s", name)
}

// ViewBlockMutation represents an operation that mutates the ViewBlock nodes in the graph.
type ViewBlockMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_type          *string
	_config        *string
	clearedFields  map[string]struct{}
	view           *int
	clearedview    bool
	dataset        map[int]struct{}
	removeddataset map[int]struct{}
	cleareddataset bool
	done           bool
	oldValue       func(context.Context) (*ViewBlock, error)
	predicates     []predicate.ViewBlock
}

var _ ent.Mutation = (*ViewBlockMutation)(nil)

// viewblockOption allows management of the mutation configuration using functional options.
type viewblockOption func(*ViewBlockMutation)

// newViewBlockMutation creates new mutation for the ViewBlock entity.
func newViewBlockMutation(c config, op Op, opts ...viewblockOption) *ViewBlockMutation {
	m := &ViewBlockMutation{
		config:        c,
		op:            op,
		typ:           TypeViewBlock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withViewBlockID sets the ID field of the mutation.
func withViewBlockID(id int) viewblockOption {
	return func(m *ViewBlockMutation) {
		var (
			err   error
			once  sync.Once
			value *ViewBlock
		)
		m.oldValue = func(ctx context.Context) (*ViewBlock, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ViewBlock.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withViewBlock sets the old ViewBlock of the mutation.
func withViewBlock(node *ViewBlock) viewblockOption {
	return func(m *ViewBlockMutation) {
		m.oldValue = func(context.Context) (*ViewBlock, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ViewBlockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ViewBlockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("model: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ViewBlockMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetType sets the "type" field.
func (m *ViewBlockMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ViewBlockMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the ViewBlock entity.
// If the ViewBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ViewBlockMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ViewBlockMutation) ResetType() {
	m._type = nil
}

// SetConfig sets the "config" field.
func (m *ViewBlockMutation) SetConfig(s string) {
	m._config = &s
}

// Config returns the value of the "config" field in the mutation.
func (m *ViewBlockMutation) Config() (r string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the ViewBlock entity.
// If the ViewBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ViewBlockMutation) OldConfig(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *ViewBlockMutation) ResetConfig() {
	m._config = nil
}

// SetViewID sets the "view" edge to the View entity by id.
func (m *ViewBlockMutation) SetViewID(id int) {
	m.view = &id
}

// ClearView clears the "view" edge to the View entity.
func (m *ViewBlockMutation) ClearView() {
	m.clearedview = true
}

// ViewCleared reports if the "view" edge to the View entity was cleared.
func (m *ViewBlockMutation) ViewCleared() bool {
	return m.clearedview
}

// ViewID returns the "view" edge ID in the mutation.
func (m *ViewBlockMutation) ViewID() (id int, exists bool) {
	if m.view != nil {
		return *m.view, true
	}
	return
}

// ViewIDs returns the "view" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ViewID instead. It exists only for internal usage by the builders.
func (m *ViewBlockMutation) ViewIDs() (ids []int) {
	if id := m.view; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetView resets all changes to the "view" edge.
func (m *ViewBlockMutation) ResetView() {
	m.view = nil
	m.clearedview = false
}

// AddDatasetIDs adds the "dataset" edge to the DataSet entity by ids.
func (m *ViewBlockMutation) AddDatasetIDs(ids ...int) {
	if m.dataset == nil {
		m.dataset = make(map[int]struct{})
	}
	for i := range ids {
		m.dataset[ids[i]] = struct{}{}
	}
}

// ClearDataset clears the "dataset" edge to the DataSet entity.
func (m *ViewBlockMutation) ClearDataset() {
	m.cleareddataset = true
}

// DatasetCleared reports if the "dataset" edge to the DataSet entity was cleared.
func (m *ViewBlockMutation) DatasetCleared() bool {
	return m.cleareddataset
}

// RemoveDatasetIDs removes the "dataset" edge to the DataSet entity by IDs.
func (m *ViewBlockMutation) RemoveDatasetIDs(ids ...int) {
	if m.removeddataset == nil {
		m.removeddataset = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddataset[ids[i]] = struct{}{}
	}
}

// RemovedDataset returns the removed IDs of the "dataset" edge to the DataSet entity.
func (m *ViewBlockMutation) RemovedDatasetIDs() (ids []int) {
	for id := range m.removeddataset {
		ids = append(ids, id)
	}
	return
}

// DatasetIDs returns the "dataset" edge IDs in the mutation.
func (m *ViewBlockMutation) DatasetIDs() (ids []int) {
	for id := range m.dataset {
		ids = append(ids, id)
	}
	return
}

// ResetDataset resets all changes to the "dataset" edge.
func (m *ViewBlockMutation) ResetDataset() {
	m.dataset = nil
	m.cleareddataset = false
	m.removeddataset = nil
}

// Op returns the operation name.
func (m *ViewBlockMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ViewBlock).
func (m *ViewBlockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ViewBlockMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._type != nil {
		fields = append(fields, viewblock.FieldType)
	}
	if m._config != nil {
		fields = append(fields, viewblock.FieldConfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ViewBlockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case viewblock.FieldType:
		return m.GetType()
	case viewblock.FieldConfig:
		return m.Config()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ViewBlockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case viewblock.FieldType:
		return m.OldType(ctx)
	case viewblock.FieldConfig:
		return m.OldConfig(ctx)
	}
	return nil, fmt.Errorf("unknown ViewBlock field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ViewBlockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case viewblock.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case viewblock.FieldConfig:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	}
	return fmt.Errorf("unknown ViewBlock field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ViewBlockMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ViewBlockMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ViewBlockMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ViewBlock numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ViewBlockMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ViewBlockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ViewBlockMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ViewBlock nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ViewBlockMutation) ResetField(name string) error {
	switch name {
	case viewblock.FieldType:
		m.ResetType()
		return nil
	case viewblock.FieldConfig:
		m.ResetConfig()
		return nil
	}
	return fmt.Errorf("unknown ViewBlock field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ViewBlockMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.view != nil {
		edges = append(edges, viewblock.EdgeView)
	}
	if m.dataset != nil {
		edges = append(edges, viewblock.EdgeDataset)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ViewBlockMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case viewblock.EdgeView:
		if id := m.view; id != nil {
			return []ent.Value{*id}
		}
	case viewblock.EdgeDataset:
		ids := make([]ent.Value, 0, len(m.dataset))
		for id := range m.dataset {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ViewBlockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddataset != nil {
		edges = append(edges, viewblock.EdgeDataset)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ViewBlockMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case viewblock.EdgeDataset:
		ids := make([]ent.Value, 0, len(m.removeddataset))
		for id := range m.removeddataset {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ViewBlockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedview {
		edges = append(edges, viewblock.EdgeView)
	}
	if m.cleareddataset {
		edges = append(edges, viewblock.EdgeDataset)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ViewBlockMutation) EdgeCleared(name string) bool {
	switch name {
	case viewblock.EdgeView:
		return m.clearedview
	case viewblock.EdgeDataset:
		return m.cleareddataset
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ViewBlockMutation) ClearEdge(name string) error {
	switch name {
	case viewblock.EdgeView:
		m.ClearView()
		return nil
	}
	return fmt.Errorf("unknown ViewBlock unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ViewBlockMutation) ResetEdge(name string) error {
	switch name {
	case viewblock.EdgeView:
		m.ResetView()
		return nil
	case viewblock.EdgeDataset:
		m.ResetDataset()
		return nil
	}
	return fmt.Errorf("unknown ViewBlock edge %s", name)
}
